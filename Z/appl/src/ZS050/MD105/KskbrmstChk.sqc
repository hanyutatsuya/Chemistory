/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Kskbrmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "Kskbrmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    bskkbn[5];
	char    knsgrp[17];
	char    kmkcd[8];
	char    ksbr[16];
	char    kmin[21];
	char    kmax[21];
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
// ADD 2006-08-31 S.Ueda >>
	char	hKnskisymd[11+1];
	char	hSriymd[11+1];
	char	hKntno[11+1];
	char	hKnsgrp[16+1];
	char	hKmkcd[7+1];
	sqlint32	num_Irai;
// ADD 2006-08-31 S.Ueda <<
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Kskbrmst

BmlDMMInfo	KskbrmstArrayChk[] = {
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SSTRING( ksbr ),
	DMM_SSTRING( kmin ),
	DMM_SSTRING( kmax ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbKskbrmstSelectKey()
 *    KSKBRMST レコードKey条件取得
 * ■引数
 *    [I]  Kskbrmst* pKey       取得するレコードのキー
 *    [O]  Kskbrmst** arrayOut  取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKskbrmstSelectChk( Kskbrmst* pKey, Kskbrmst** arrayOut, int* numOut )
{
    Kskbrmst*   array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, KskbrmstArrayChk ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		BSKKBN,
		KNSGRP,
		KMKCD,
		KSBR,
		KMIN,
		KMAX,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        KSKBRMST
    WHERE
		BSKKBN = :bskkbn AND
		KNSGRP = :knsgrp AND
		KMKCD = :kmkcd AND
		DOUBLE(:ksbr) BETWEEN DOUBLE(KMIN) AND DOUBLE(KMAX) AND
		CURRENT DATE BETWEEN KAIYMD and HAIYMD FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Kskbrmst* rec;

        EXEC SQL FETCH c2 INTO
			:bskkbn,
			:knsgrp,
			:kmkcd,
			:ksbr,
			:kmin,
			:kmax,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Kskbrmst*)ZbmlRealloc( array,
                                    sizeof( Kskbrmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Kskbrmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KskbrmstArrayChk );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
// ADD 2006-08-31 S.Ueda >>
/******************************************************************************
 * 
 *    存在する結果を検索して、すべてが未報告完了でかつ、中間であるか。
 * ■引数
 *	[I] char * aUtkymd		受付日
 *  [I] char * aKntno		依頼書No
 *  [I] char * aKnsgrp		検査グループ
 *  [I] char * aKmkcd		項目コード
 * ■戻り値
 *		0以上	依頼情報数
 *		0未満	SQL Error
 * UPD Nagata 2006-09-01
 * UPD Nagata 2007-05-10 存在する結果を検索し、最終報告結果数をカウントする
 *                       (未報告完了の条件を削除）
 ******************************************************************************/
long ZdbSelectMihoKekka( char * aKnskisymd,char * aSriymd, char * aKntno,  char * aKnsgrp, char * aKmkcd )
{
	memcpy( hKnskisymd, aKnskisymd, sizeof(hKnskisymd)-1 );
	memcpy( hSriymd, aSriymd, sizeof(hSriymd)-1 );
	memcpy( hKntno, aKntno, sizeof(hKntno)-1 );
	memcpy( hKnsgrp, aKnsgrp, sizeof(hKnsgrp)-1 );
	memcpy( hKmkcd, aKmkcd, sizeof(aKmkcd)-1 );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL
		SELECT	COUNT(*)
		INTO	:num_Irai
		FROM	KEKKA
		WHERE	KNSKISYMD	= :hKnskisymd
		 AND    SRIYMD  = :hSriymd
		 AND	KNTNO	= :hKntno
		 AND	KNSGRP	= :hKnsgrp
		 AND	KMKCD	= :hKmkcd
		 AND	KKAJKCD != '1'
	;

		/*  AND	(KNSFLG	!= 'M' OR KKAJKCD != '1') */
	return num_Irai;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
// ADD 2006-08-31 S.Ueda <<
/** End of File *********************************************************/
