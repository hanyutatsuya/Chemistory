/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： GD205Kekka.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-03-07     H.Suyama       Create
 *  1.01     2006-04-06     H.Suyama       検索条件にセクションコード追加
 *  1.02     2006-04-12     H.Suyama       テーブル結合条件を外部結合に変更
 *	1.03     2006-04-20     H.Suyama       コントロール精度保証変更
 *	                                       分析機号機→分析機ライン変更
 *	                                       検査フラグ更新関数追加
 **********************************************************************/
#include <stdio.h>

#include "GD205Kekka.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#include "bmllog.h"				// 1.06 ADD

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    knskisymd[11];
	char    sriymd[11];
	char    kntno[14];
	char    kntketflg;
	char    knsgrp[17];
	char    kmkcd[8];
	short   knssu;
	short   knssueda;
	char    irihsmkbn;
	char    irikbn;
	char    ksktkbn;
	char    utkymd[11];
	char    irino[12];
	char    iriketflg;
	short   zssdino;
	char    sstcd[8];
	char    trid[11];
	short   trpos;
	char    asyrckid[11];
	short   asyrckpos;
	char    oyakmkcd[8];
	char    seccd[3];
	char    bkfkkbn;
	char    smpcd[8];
	char    bskkbn[5];
	char    bsklne[5];
	char    bskgok[7];
	sqlint32  bskseq;
	char    bskerrsts[3];
	char    sktdh[27];
	char    nbkmkcd[8];
	char    tstrflg;
	char    zrcd[5];
	char    ysnlbl[3];
	char    kjno[4];
	char    fkhkknohjkbn;
	char    tbkjno[4];
	char    tbkjflg;
	char    htkfkhms[25];
	char    skflg;
	char    tskflg[3];
	char    tktflg[3];
	char    jisksbr[16];
	char    kkflg;
	char    kkiriflg;
	short   kkirilotno;
	char    hsykflg;
	char    hskflg;
	char    hhkkflg;
	char    rawdata[21];
	char    knskka1[13];
	char    knskka2[25];
	char    knskka2kbn[3];
	char    kkahskcd[4];
	char    hjkka[25];
	char    sdi[4];
	char    kkacmt1[6];
	char    kkacmt2[6];
	char    kkajkcd;
	char    pncrgflg;
	char    knspncrgflg;
	char    kkaksflg;
	char    kkassflg;
	char    ijkbnm;
	char    ijkbnf;
	char    ijkbnn;
	char    tbijkbnm;
	char    tbijkbnf;
	char    tbijkbnn;
	char    nbdolbl[3];
	char    nbdoerr[4];
	char    ykdolbl[3];
	char    ykdoerr[4];
	char    etclbl[3];
	char    etcerr[4];
	sqlint32  ctrlno;
	sqlint32  knsseq;
	short   bthno;
	sqlint32  pltno;
	sqlint32  pltseq;
	char    dtnrtts[9];
	char    dtnrdh[27];
	char    knskrdh[27];
	char    hkkdh[27];
	char    hkkkbdh[9];
	char    zkhkkyymd[11];
	char    zkhkkytme[5];
	char    frkkaflg;
	char    gzbsflg;
	char    hsiflg;
	char    kkaysnflg;
	char    tnyrkflg;
	char    siyflg;
	char    knsflg;
	char    renjicflg;
	char    soukn1flg;
	char    kanrenflg;
	char    bunkkuflg;
	char    kesseiflg;
	char    rirekiflg;
	char    syougoflg;
	char    keisanflg;
	char    per100flg;
	char    tousekflg;
	char    kisyakflg;
	char    kouseiflg;
	char    syoungflg;
	char    soukn2flg;
	char    fukaptflg;
	char    yobiflg01;
	char    tobiflg02;
	char    yobiflg03;
	char    yobiflg04;
	char    yobiflg05;
	char    skrycda[4];
	char    skrycdb[4];
	char    skrycdc[4];
	char    ksndh[27];

	char    hkksjymd[11];
	sqlint32  hkksjno;
	char    hkkkbn;
	char    hkkjkn;
	char    hkkjknst[21];
	char    hkkjkned[21];
	char    hkkflnm[51];
	char    hkksjtts[9];
	char    hkkstdh[27];
	char    hkkeddh[27];
	char    tnsstdh[27];
	char    tnseddh[27];
	sqlint32  hkkssknsu;
	sqlint32  hkkhrysu;
	char    ssnmtfilid[13];
	char    hkkjkflg[3];
	char    hkkerrcode[9];

	// 範囲検索用
	sqlint32	ctrlnost;
	sqlint32	ctrlnoed;
	sqlint32	pltnost;
	sqlint32	pltnoed;
	sqlint32	knsseqst;
	sqlint32	knsseqed;
	char		irinost[12];
	char		irinoed[12];
	char		kntnost[14];
	char		kntnoed[14];

EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Kekka

BmlDMMInfo	KekkaArray[] = {
	DMM_SDATE( knskisymd ),
	DMM_SDATE( sriymd ),
	DMM_SSTRING( kntno ),
	DMM_SCHAR( kntketflg ),
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SSHORT( knssu ),
	DMM_SSHORT( knssueda ),
	DMM_SCHAR( irihsmkbn ),
	DMM_SCHAR( irikbn ),
	DMM_SCHAR( ksktkbn ),
	DMM_SDATE( utkymd ),
	DMM_SSTRING( irino ),
	DMM_SCHAR( iriketflg ),
	DMM_SSHORT( zssdino ),
	DMM_SSTRING( sstcd ),
	DMM_SSTRING( trid ),
	DMM_SSHORT( trpos ),
	DMM_SSTRING( asyrckid ),
	DMM_SSHORT( asyrckpos ),
	DMM_SSTRING( oyakmkcd ),
	DMM_SSTRING( seccd ),
	DMM_SCHAR( bkfkkbn ),
	DMM_SSTRING( smpcd ),
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( bsklne ),
	DMM_SSTRING( bskgok ),
	DMM_SLONG( bskseq ),
	DMM_SSTRING( bskerrsts ),
	DMM_STIMESTAMP( sktdh ),
	DMM_SSTRING( nbkmkcd ),
	DMM_SCHAR( tstrflg ),
	DMM_SSTRING( zrcd ),
	DMM_SSTRING( ysnlbl ),
	DMM_SSTRING( kjno ),
	DMM_SCHAR( fkhkknohjkbn ),
	DMM_SSTRING( tbkjno ),
	DMM_SCHAR( tbkjflg ),
	DMM_SSTRING( htkfkhms ),
	DMM_SCHAR( skflg ),
	DMM_SSTRING( tskflg ),
	DMM_SSTRING( tktflg ),
	DMM_SSTRING( jisksbr ),
	DMM_SCHAR( kkflg ),
	DMM_SCHAR( kkiriflg ),
	DMM_SSHORT( kkirilotno ),
	DMM_SCHAR( hsykflg ),
	DMM_SCHAR( hskflg ),
	DMM_SCHAR( hhkkflg ),
	DMM_SSTRING( rawdata ),
	DMM_SSTRING( knskka1 ),
	DMM_SSTRING( knskka2 ),
	DMM_SSTRING( knskka2kbn ),
	DMM_SSTRING( kkahskcd ),
	DMM_SSTRING( hjkka ),
	DMM_SSTRING( sdi ),
	DMM_SSTRING( kkacmt1 ),
	DMM_SSTRING( kkacmt2 ),
	DMM_SCHAR( kkajkcd ),
	DMM_SCHAR( pncrgflg ),
	DMM_SCHAR( knspncrgflg ),
	DMM_SCHAR( kkaksflg ),
	DMM_SCHAR( kkassflg ),
	DMM_SCHAR( ijkbnm ),
	DMM_SCHAR( ijkbnf ),
	DMM_SCHAR( ijkbnn ),
	DMM_SCHAR( tbijkbnm ),
	DMM_SCHAR( tbijkbnf ),
	DMM_SCHAR( tbijkbnn ),
	DMM_SSTRING( nbdolbl ),
	DMM_SSTRING( nbdoerr ),
	DMM_SSTRING( ykdolbl ),
	DMM_SSTRING( ykdoerr ),
	DMM_SSTRING( etclbl ),
	DMM_SSTRING( etcerr ),
	DMM_SLONG( ctrlno ),
	DMM_SLONG( knsseq ),
	DMM_SSHORT( bthno ),
	DMM_SLONG( pltno ),
	DMM_SLONG( pltseq ),
	DMM_SSTRING( dtnrtts ),
	DMM_STIMESTAMP( dtnrdh ),
	DMM_STIMESTAMP( knskrdh ),
	DMM_STIMESTAMP( hkkdh ),
	DMM_STIME( hkkkbdh ),
	DMM_SDATE( zkhkkyymd ),
	DMM_SSTRING( zkhkkytme ),
	DMM_SCHAR( frkkaflg ),
	DMM_SCHAR( gzbsflg ),
	DMM_SCHAR( hsiflg ),
	DMM_SCHAR( kkaysnflg ),
	DMM_SCHAR( tnyrkflg ),
	DMM_SCHAR( siyflg ),
	DMM_SCHAR( knsflg ),
	DMM_SCHAR( renjicflg ),
	DMM_SCHAR( soukn1flg ),
	DMM_SCHAR( kanrenflg ),
	DMM_SCHAR( bunkkuflg ),
	DMM_SCHAR( kesseiflg ),
	DMM_SCHAR( rirekiflg ),
	DMM_SCHAR( syougoflg ),
	DMM_SCHAR( keisanflg ),
	DMM_SCHAR( per100flg ),
	DMM_SCHAR( tousekflg ),
	DMM_SCHAR( kisyakflg ),
	DMM_SCHAR( kouseiflg ),
	DMM_SCHAR( syoungflg ),
	DMM_SCHAR( soukn2flg ),
	DMM_SCHAR( fukaptflg ),
	DMM_SCHAR( yobiflg01 ),
	DMM_SCHAR( tobiflg02 ),
	DMM_SCHAR( yobiflg03 ),
	DMM_SCHAR( yobiflg04 ),
	DMM_SCHAR( yobiflg05 ),
	DMM_SSTRING( skrycda ),
	DMM_SSTRING( skrycdb ),
	DMM_SSTRING( skrycdc ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

extern BmlDMMInfo      HkkknriArray[];

/******************************************************************************
 * ZdbKekkaGD205SelectByCtrlNo()
 *    KEKKA レコード条件取得（コントロールNo）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD205SelectByCtrlNo( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	ctrlnost = atoi( hkkjknst );
	ctrlnoed = atoi( hkkjkned );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c3 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNTKETFLG,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.IRIHSMKBN,
		KKA.IRIKBN,
		KKA.KSKTKBN,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.IRIKETFLG,
		KKA.ZSSDINO,
		KKA.SSTCD,
		KKA.TRID,
		KKA.TRPOS,
		KKA.ASYRCKID,
		KKA.ASYRCKPOS,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.BKFKKBN,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKLNE,
		KKA.BSKGOK,
		KKA.BSKSEQ,
		KKA.BSKERRSTS,
		KKA.SKTDH,
		KKA.NBKMKCD,
		KKA.TSTRFLG,
		KKA.ZRCD,
		KKA.YSNLBL,
		KKA.KJNO,
		KKA.FKHKKNOHJKBN,
		KKA.TBKJNO,
		KKA.TBKJFLG,
		KKA.HTKFKHMS,
		KKA.SKFLG,
		KKA.TSKFLG,
		KKA.TKTFLG,
		KKA.JISKSBR,
		KKA.KKFLG,
		KKA.KKIRIFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.RAWDATA,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.HJKKA,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KNSPNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.TBIJKBNM,
		KKA.TBIJKBNF,
		KKA.TBIJKBNN,
		KKA.NBDOLBL,
		KKA.NBDOERR,
		KKA.YKDOLBL,
		KKA.YKDOERR,
		KKA.ETCLBL,
		KKA.ETCERR,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.BTHNO,
		KKA.PLTNO,
		KKA.PLTSEQ,
		KKA.DTNRTTS,
		KKA.DTNRDH,
		KKA.KNSKRDH,
		KKA.HKKDH,
		KKA.HKKKBDH,
		KKA.ZKHKKYYMD,
		KKA.ZKHKKYTME,
		KKA.FRKKAFLG,
		KKA.GZBSFLG,
		KKA.HSIFLG,
		KKA.KKAYSNFLG,
		KKA.TNYRKFLG,
		KKA.SIYFLG,
		KKA.KNSFLG,
		KKA.RENJICFLG,
		KKA.SOUKN1FLG,
		KKA.KANRENFLG,
		KKA.BUNKKUFLG,
		KKA.KESSEIFLG,
		KKA.RIREKIFLG,
		KKA.SYOUGOFLG,
		KKA.KEISANFLG,
		KKA.PER100FLG,
		KKA.TOUSEKFLG,
		KKA.KISYAKFLG,
		KKA.KOUSEIFLG,
		KKA.SYOUNGFLG,
		KKA.SOUKN2FLG,
		KKA.FUKAPTFLG,
		KKA.YOBIFLG01,
		KKA.TOBIFLG02,
		KKA.YOBIFLG03,
		KKA.YOBIFLG04,
		KKA.YOBIFLG05,
		KKA.SKRYCDA,
		KKA.SKRYCDB,
		KKA.SKRYCDC,
		KKA.KSNDH
	FROM
		KEKKA KKA
		LEFT OUTER JOIN 
			(SELECT DISTINCT
				KKA_CNT.KNSKISYMD
				, KKA_CNT.BSKKBN
				, KKA_CNT.BSKLNE AS BSKGOK
				, KKA_CNT.CTRLNO
				, KKA_CNT.KNSGRP
				, COALESCE(VCHK.OKCNT, 0) AS OKCNT
				, COALESCE(VCHK.NGCNT, 0) AS NGCNT
				, COALESCE(VCHK.NONECNT, 0) AS NONECNT
				, COALESCE(KKA_ERR.FLGNGCNT, 0) AS FLGNGCNT
			FROM
				KEKKA  KKA_CNT
				LEFT OUTER JOIN VCTRLCHK VCHK
					ON KKA_CNT.KNSKISYMD = VCHK.KNSKISYMD
					AND KKA_CNT.BSKKBN = VCHK.BSKKBN
					AND KKA_CNT.BSKLNE = VCHK.BSKLNE
					AND KKA_CNT.CTRLNO = VCHK.CTRLNO
				LEFT OUTER JOIN
					(SELECT
						KNSKISYMD
						, BSKKBN
						, BSKLNE
						, CTRLNO
						, KNSGRP
						, COUNT(*) AS FLGNGCNT
					FROM
						KEKKA
					WHERE
						KNSFLG IN ('A', 'R', 'T')
						AND IRIKBN IN ('A','K')
						AND KKAJKCD = '3'
					GROUP BY
						KNSKISYMD
						, BSKKBN
						, BSKLNE
						, CTRLNO
						, KNSGRP
					) KKA_ERR 
					ON KKA_CNT.KNSKISYMD = KKA_ERR.KNSKISYMD
					AND KKA_CNT.BSKKBN = KKA_ERR.BSKKBN
					AND KKA_CNT.BSKLNE = KKA_ERR.BSKLNE
					AND KKA_CNT.CTRLNO = KKA_ERR.CTRLNO
					AND KKA_CNT.KNSGRP = KKA_ERR.KNSGRP
				WHERE
					KKA_CNT.IRIHSMKBN IN ('0', '1')
					AND KKA_CNT.KNSFLG <> 'E'
					AND KKA_CNT.KNSFLG <> 'M' 
			) AS CTC
			ON KKA.KNSKISYMD = CTC.KNSKISYMD
			AND KKA.BSKKBN = CTC.BSKKBN
			AND KKA.BSKLNE = CTC.BSKGOK
			AND KKA.CTRLNO = CTC.CTRLNO
			AND KKA.KNSGRP = CTC.KNSGRP
		LEFT OUTER JOIN (
			SELECT
				(SELECT KKKJSRIYMD FROM SYSKNRMST) AS KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.KNSKISYMD	= :knskisymd
		AND KKA.BSKKBN		= :bskkbn
		AND KKA.BSKLNE		= :bskgok
		AND KKA.KNSGRP      = :knsgrp
		AND KKA.CTRLNO		>= :ctrlnost
		AND KKA.CTRLNO		<= :ctrlnoed
		AND KKA.KKAJKCD		= :hkkkbn
		AND KKA.SECCD		= :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X' 
				AND COALESCE(CTC.OKCNT, 0) > 0
				AND COALESCE(CTC.NGCNT, 0) = 0
				AND COALESCE(CTC.NONECNT, 0) = 0
				AND FLGNGCNT = 0
				AND XBM.XBARMJKFLG IS NULL
			)
		)
	FOR READ ONLY;

	EXEC SQL OPEN c3;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c3 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:kntketflg,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:irihsmkbn,
			:irikbn,
			:ksktkbn,
			:utkymd,
			:irino,
			:iriketflg,
			:zssdino,
			:sstcd,
			:trid,
			:trpos,
			:asyrckid,
			:asyrckpos,
			:oyakmkcd,
			:seccd,
			:bkfkkbn,
			:smpcd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:bskseq,
			:bskerrsts,
			:sktdh,
			:nbkmkcd,
			:tstrflg,
			:zrcd,
			:ysnlbl,
			:kjno,
			:fkhkknohjkbn,
			:tbkjno,
			:tbkjflg,
			:htkfkhms,
			:skflg,
			:tskflg,
			:tktflg,
			:jisksbr,
			:kkflg,
			:kkiriflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:rawdata,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:hjkka,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:knspncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:tbijkbnm,
			:tbijkbnf,
			:tbijkbnn,
			:nbdolbl,
			:nbdoerr,
			:ykdolbl,
			:ykdoerr,
			:etclbl,
			:etcerr,
			:ctrlno,
			:knsseq,
			:bthno,
			:pltno,
			:pltseq,
			:dtnrtts,
			:dtnrdh,
			:knskrdh,
			:hkkdh,
			:hkkkbdh,
			:zkhkkyymd,
			:zkhkkytme,
			:frkkaflg,
			:gzbsflg,
			:hsiflg,
			:kkaysnflg,
			:tnyrkflg,
			:siyflg,
			:knsflg,
			:renjicflg,
			:soukn1flg,
			:kanrenflg,
			:bunkkuflg,
			:kesseiflg,
			:rirekiflg,
			:syougoflg,
			:keisanflg,
			:per100flg,
			:tousekflg,
			:kisyakflg,
			:kouseiflg,
			:syoungflg,
			:soukn2flg,
			:fukaptflg,
			:yobiflg01,
			:tobiflg02,
			:yobiflg03,
			:yobiflg04,
			:yobiflg05,
			:skrycda,
			:skrycdb,
			:skrycdc,
			:ksndh;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c3;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD205SelectByCtrlNo",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD205SelectByPltNo()
 *    KEKKA レコード条件取得（プロットNo）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD205SelectByPltNo( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	pltnost = atoi( hkkjknst );
	pltnoed = atoi( hkkjkned );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c4 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNTKETFLG,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.IRIHSMKBN,
		KKA.IRIKBN,
		KKA.KSKTKBN,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.IRIKETFLG,
		KKA.ZSSDINO,
		KKA.SSTCD,
		KKA.TRID,
		KKA.TRPOS,
		KKA.ASYRCKID,
		KKA.ASYRCKPOS,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.BKFKKBN,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKLNE,
		KKA.BSKGOK,
		KKA.BSKSEQ,
		KKA.BSKERRSTS,
		KKA.SKTDH,
		KKA.NBKMKCD,
		KKA.TSTRFLG,
		KKA.ZRCD,
		KKA.YSNLBL,
		KKA.KJNO,
		KKA.FKHKKNOHJKBN,
		KKA.TBKJNO,
		KKA.TBKJFLG,
		KKA.HTKFKHMS,
		KKA.SKFLG,
		KKA.TSKFLG,
		KKA.TKTFLG,
		KKA.JISKSBR,
		KKA.KKFLG,
		KKA.KKIRIFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.RAWDATA,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.HJKKA,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KNSPNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.TBIJKBNM,
		KKA.TBIJKBNF,
		KKA.TBIJKBNN,
		KKA.NBDOLBL,
		KKA.NBDOERR,
		KKA.YKDOLBL,
		KKA.YKDOERR,
		KKA.ETCLBL,
		KKA.ETCERR,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.BTHNO,
		KKA.PLTNO,
		KKA.PLTSEQ,
		KKA.DTNRTTS,
		KKA.DTNRDH,
		KKA.KNSKRDH,
		KKA.HKKDH,
		KKA.HKKKBDH,
		KKA.ZKHKKYYMD,
		KKA.ZKHKKYTME,
		KKA.FRKKAFLG,
		KKA.GZBSFLG,
		KKA.HSIFLG,
		KKA.KKAYSNFLG,
		KKA.TNYRKFLG,
		KKA.SIYFLG,
		KKA.KNSFLG,
		KKA.RENJICFLG,
		KKA.SOUKN1FLG,
		KKA.KANRENFLG,
		KKA.BUNKKUFLG,
		KKA.KESSEIFLG,
		KKA.RIREKIFLG,
		KKA.SYOUGOFLG,
		KKA.KEISANFLG,
		KKA.PER100FLG,
		KKA.TOUSEKFLG,
		KKA.KISYAKFLG,
		KKA.KOUSEIFLG,
		KKA.SYOUNGFLG,
		KKA.SOUKN2FLG,
		KKA.FUKAPTFLG,
		KKA.YOBIFLG01,
		KKA.TOBIFLG02,
		KKA.YOBIFLG03,
		KKA.YOBIFLG04,
		KKA.YOBIFLG05,
		KKA.SKRYCDA,
		KKA.SKRYCDB,
		KKA.SKRYCDC,
		KKA.KSNDH
	FROM
		KEKKA KKA
		LEFT OUTER JOIN (
			SELECT
				(SELECT KKKJSRIYMD FROM SYSKNRMST) AS KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.KNSKISYMD	= :knskisymd
		AND KKA.BSKKBN		= :bskkbn
		AND KKA.BSKLNE		= :bskgok
		AND KKA.KNSGRP		= :knsgrp
		AND KKA.KMKCD		= :kmkcd
		AND KKA.PLTNO		>= :pltnost
		AND KKA.PLTNO		<= :pltnoed
		AND KKA.KKAJKCD		= :hkkkbn
		AND KKA.SECCD		= :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X'
				AND XBM.XBARMJKFLG IS NULL
			)
		)
	FOR READ ONLY;

	EXEC SQL OPEN c4;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c4 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:kntketflg,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:irihsmkbn,
			:irikbn,
			:ksktkbn,
			:utkymd,
			:irino,
			:iriketflg,
			:zssdino,
			:sstcd,
			:trid,
			:trpos,
			:asyrckid,
			:asyrckpos,
			:oyakmkcd,
			:seccd,
			:bkfkkbn,
			:smpcd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:bskseq,
			:bskerrsts,
			:sktdh,
			:nbkmkcd,
			:tstrflg,
			:zrcd,
			:ysnlbl,
			:kjno,
			:fkhkknohjkbn,
			:tbkjno,
			:tbkjflg,
			:htkfkhms,
			:skflg,
			:tskflg,
			:tktflg,
			:jisksbr,
			:kkflg,
			:kkiriflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:rawdata,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:hjkka,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:knspncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:tbijkbnm,
			:tbijkbnf,
			:tbijkbnn,
			:nbdolbl,
			:nbdoerr,
			:ykdolbl,
			:ykdoerr,
			:etclbl,
			:etcerr,
			:ctrlno,
			:knsseq,
			:bthno,
			:pltno,
			:pltseq,
			:dtnrtts,
			:dtnrdh,
			:knskrdh,
			:hkkdh,
			:hkkkbdh,
			:zkhkkyymd,
			:zkhkkytme,
			:frkkaflg,
			:gzbsflg,
			:hsiflg,
			:kkaysnflg,
			:tnyrkflg,
			:siyflg,
			:knsflg,
			:renjicflg,
			:soukn1flg,
			:kanrenflg,
			:bunkkuflg,
			:kesseiflg,
			:rirekiflg,
			:syougoflg,
			:keisanflg,
			:per100flg,
			:tousekflg,
			:kisyakflg,
			:kouseiflg,
			:syoungflg,
			:soukn2flg,
			:fukaptflg,
			:yobiflg01,
			:tobiflg02,
			:yobiflg03,
			:yobiflg04,
			:yobiflg05,
			:skrycda,
			:skrycdb,
			:skrycdc,
			:ksndh;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c4;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
//1.06 DELL printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD205SelectByPltNo",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD205SelectByKnsSeq()
 *    KEKKA レコード条件取得（検査SEQ）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD205SelectByKnsSeq( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	knsseqst = atoi( hkkjknst );
	knsseqed = atoi( hkkjkned );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c5 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNTKETFLG,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.IRIHSMKBN,
		KKA.IRIKBN,
		KKA.KSKTKBN,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.IRIKETFLG,
		KKA.ZSSDINO,
		KKA.SSTCD,
		KKA.TRID,
		KKA.TRPOS,
		KKA.ASYRCKID,
		KKA.ASYRCKPOS,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.BKFKKBN,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKLNE,
		KKA.BSKGOK,
		KKA.BSKSEQ,
		KKA.BSKERRSTS,
		KKA.SKTDH,
		KKA.NBKMKCD,
		KKA.TSTRFLG,
		KKA.ZRCD,
		KKA.YSNLBL,
		KKA.KJNO,
		KKA.FKHKKNOHJKBN,
		KKA.TBKJNO,
		KKA.TBKJFLG,
		KKA.HTKFKHMS,
		KKA.SKFLG,
		KKA.TSKFLG,
		KKA.TKTFLG,
		KKA.JISKSBR,
		KKA.KKFLG,
		KKA.KKIRIFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.RAWDATA,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.HJKKA,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KNSPNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.TBIJKBNM,
		KKA.TBIJKBNF,
		KKA.TBIJKBNN,
		KKA.NBDOLBL,
		KKA.NBDOERR,
		KKA.YKDOLBL,
		KKA.YKDOERR,
		KKA.ETCLBL,
		KKA.ETCERR,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.BTHNO,
		KKA.PLTNO,
		KKA.PLTSEQ,
		KKA.DTNRTTS,
		KKA.DTNRDH,
		KKA.KNSKRDH,
		KKA.HKKDH,
		KKA.HKKKBDH,
		KKA.ZKHKKYYMD,
		KKA.ZKHKKYTME,
		KKA.FRKKAFLG,
		KKA.GZBSFLG,
		KKA.HSIFLG,
		KKA.KKAYSNFLG,
		KKA.TNYRKFLG,
		KKA.SIYFLG,
		KKA.KNSFLG,
		KKA.RENJICFLG,
		KKA.SOUKN1FLG,
		KKA.KANRENFLG,
		KKA.BUNKKUFLG,
		KKA.KESSEIFLG,
		KKA.RIREKIFLG,
		KKA.SYOUGOFLG,
		KKA.KEISANFLG,
		KKA.PER100FLG,
		KKA.TOUSEKFLG,
		KKA.KISYAKFLG,
		KKA.KOUSEIFLG,
		KKA.SYOUNGFLG,
		KKA.SOUKN2FLG,
		KKA.FUKAPTFLG,
		KKA.YOBIFLG01,
		KKA.TOBIFLG02,
		KKA.YOBIFLG03,
		KKA.YOBIFLG04,
		KKA.YOBIFLG05,
		KKA.SKRYCDA,
		KKA.SKRYCDB,
		KKA.SKRYCDC,
		KKA.KSNDH
	FROM
		KEKKA KKA
		LEFT OUTER JOIN VCTRLCHK CTC
			ON KKA.KNSKISYMD = CTC.KNSKISYMD
			AND KKA.BSKKBN = CTC.BSKKBN
			AND KKA.BSKLNE = CTC.BSKLNE
			AND KKA.CTRLNO = CTC.CTRLNO
		LEFT OUTER JOIN (
			SELECT
				(SELECT KKKJSRIYMD FROM SYSKNRMST) AS KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.KNSKISYMD	= :knskisymd
		AND KKA.KNSGRP		= :knsgrp
		AND KKA.KNSSEQ		>= :knsseqst
		AND KKA.KNSSEQ		<= :knsseqed
		AND KKA.KKAJKCD		= :hkkkbn
		AND KKA.SECCD		= :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X' 
				AND COALESCE(CTC.OKCNT, 0) > 0
				AND COALESCE(CTC.NGCNT, 0) = 0
				AND COALESCE(CTC.NONECNT, 0) = 0
				AND XBM.XBARMJKFLG IS NULL
			)
		)
	FOR READ ONLY;

	EXEC SQL OPEN c5;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c5 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:kntketflg,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:irihsmkbn,
			:irikbn,
			:ksktkbn,
			:utkymd,
			:irino,
			:iriketflg,
			:zssdino,
			:sstcd,
			:trid,
			:trpos,
			:asyrckid,
			:asyrckpos,
			:oyakmkcd,
			:seccd,
			:bkfkkbn,
			:smpcd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:bskseq,
			:bskerrsts,
			:sktdh,
			:nbkmkcd,
			:tstrflg,
			:zrcd,
			:ysnlbl,
			:kjno,
			:fkhkknohjkbn,
			:tbkjno,
			:tbkjflg,
			:htkfkhms,
			:skflg,
			:tskflg,
			:tktflg,
			:jisksbr,
			:kkflg,
			:kkiriflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:rawdata,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:hjkka,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:knspncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:tbijkbnm,
			:tbijkbnf,
			:tbijkbnn,
			:nbdolbl,
			:nbdoerr,
			:ykdolbl,
			:ykdoerr,
			:etclbl,
			:etcerr,
			:ctrlno,
			:knsseq,
			:bthno,
			:pltno,
			:pltseq,
			:dtnrtts,
			:dtnrdh,
			:knskrdh,
			:hkkdh,
			:hkkkbdh,
			:zkhkkyymd,
			:zkhkkytme,
			:frkkaflg,
			:gzbsflg,
			:hsiflg,
			:kkaysnflg,
			:tnyrkflg,
			:siyflg,
			:knsflg,
			:renjicflg,
			:soukn1flg,
			:kanrenflg,
			:bunkkuflg,
			:kesseiflg,
			:rirekiflg,
			:syougoflg,
			:keisanflg,
			:per100flg,
			:tousekflg,
			:kisyakflg,
			:kouseiflg,
			:syoungflg,
			:soukn2flg,
			:fukaptflg,
			:yobiflg01,
			:tobiflg02,
			:yobiflg03,
			:yobiflg04,
			:yobiflg05,
			:skrycda,
			:skrycdb,
			:skrycdc,
			:ksndh;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c5;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
//1.06 DELL printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD205SelectByKnsSeq",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD205SelectByIriNo()
 *    KEKKA レコード条件取得（依頼No）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD205SelectByIriNo( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	memset( irinost, 0, sizeof( irinost ) );
	memcpy( irinost, hkkjknst, sizeof( irinost ) );
	memset( irinoed, 0, sizeof( irinoed ) );
	memcpy( irinoed, hkkjkned, sizeof( irinoed ) );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c6 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNTKETFLG,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.IRIHSMKBN,
		KKA.IRIKBN,
		KKA.KSKTKBN,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.IRIKETFLG,
		KKA.ZSSDINO,
		KKA.SSTCD,
		KKA.TRID,
		KKA.TRPOS,
		KKA.ASYRCKID,
		KKA.ASYRCKPOS,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.BKFKKBN,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKLNE,
		KKA.BSKGOK,
		KKA.BSKSEQ,
		KKA.BSKERRSTS,
		KKA.SKTDH,
		KKA.NBKMKCD,
		KKA.TSTRFLG,
		KKA.ZRCD,
		KKA.YSNLBL,
		KKA.KJNO,
		KKA.FKHKKNOHJKBN,
		KKA.TBKJNO,
		KKA.TBKJFLG,
		KKA.HTKFKHMS,
		KKA.SKFLG,
		KKA.TSKFLG,
		KKA.TKTFLG,
		KKA.JISKSBR,
		KKA.KKFLG,
		KKA.KKIRIFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.RAWDATA,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.HJKKA,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KNSPNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.TBIJKBNM,
		KKA.TBIJKBNF,
		KKA.TBIJKBNN,
		KKA.NBDOLBL,
		KKA.NBDOERR,
		KKA.YKDOLBL,
		KKA.YKDOERR,
		KKA.ETCLBL,
		KKA.ETCERR,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.BTHNO,
		KKA.PLTNO,
		KKA.PLTSEQ,
		KKA.DTNRTTS,
		KKA.DTNRDH,
		KKA.KNSKRDH,
		KKA.HKKDH,
		KKA.HKKKBDH,
		KKA.ZKHKKYYMD,
		KKA.ZKHKKYTME,
		KKA.FRKKAFLG,
		KKA.GZBSFLG,
		KKA.HSIFLG,
		KKA.KKAYSNFLG,
		KKA.TNYRKFLG,
		KKA.SIYFLG,
		KKA.KNSFLG,
		KKA.RENJICFLG,
		KKA.SOUKN1FLG,
		KKA.KANRENFLG,
		KKA.BUNKKUFLG,
		KKA.KESSEIFLG,
		KKA.RIREKIFLG,
		KKA.SYOUGOFLG,
		KKA.KEISANFLG,
		KKA.PER100FLG,
		KKA.TOUSEKFLG,
		KKA.KISYAKFLG,
		KKA.KOUSEIFLG,
		KKA.SYOUNGFLG,
		KKA.SOUKN2FLG,
		KKA.FUKAPTFLG,
		KKA.YOBIFLG01,
		KKA.TOBIFLG02,
		KKA.YOBIFLG03,
		KKA.YOBIFLG04,
		KKA.YOBIFLG05,
		KKA.SKRYCDA,
		KKA.SKRYCDB,
		KKA.SKRYCDC,
		KKA.KSNDH
	FROM
		KEKKA KKA
		LEFT OUTER JOIN VCTRLCHK CTC
			ON KKA.KNSKISYMD = CTC.KNSKISYMD
			AND KKA.BSKKBN = CTC.BSKKBN
			AND KKA.BSKLNE = CTC.BSKLNE
			AND KKA.CTRLNO = CTC.CTRLNO
		LEFT OUTER JOIN (
			SELECT
				(SELECT KKKJSRIYMD FROM SYSKNRMST) AS KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.UTKYMD		= :utkymd
		AND KKA.KNSGRP		= :knsgrp
		AND KKA.IRINO		>= :irinost
		AND KKA.IRINO		<= :irinoed
		AND KKA.KKAJKCD		= :hkkkbn
		AND KKA.SECCD		= :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X' 
				AND COALESCE(CTC.OKCNT, 0) > 0
				AND COALESCE(CTC.NGCNT, 0) = 0
				AND COALESCE(CTC.NONECNT, 0) = 0
				AND XBM.XBARMJKFLG IS NULL
			)
		)
	FOR READ ONLY;

	EXEC SQL OPEN c6;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c6 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:kntketflg,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:irihsmkbn,
			:irikbn,
			:ksktkbn,
			:utkymd,
			:irino,
			:iriketflg,
			:zssdino,
			:sstcd,
			:trid,
			:trpos,
			:asyrckid,
			:asyrckpos,
			:oyakmkcd,
			:seccd,
			:bkfkkbn,
			:smpcd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:bskseq,
			:bskerrsts,
			:sktdh,
			:nbkmkcd,
			:tstrflg,
			:zrcd,
			:ysnlbl,
			:kjno,
			:fkhkknohjkbn,
			:tbkjno,
			:tbkjflg,
			:htkfkhms,
			:skflg,
			:tskflg,
			:tktflg,
			:jisksbr,
			:kkflg,
			:kkiriflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:rawdata,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:hjkka,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:knspncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:tbijkbnm,
			:tbijkbnf,
			:tbijkbnn,
			:nbdolbl,
			:nbdoerr,
			:ykdolbl,
			:ykdoerr,
			:etclbl,
			:etcerr,
			:ctrlno,
			:knsseq,
			:bthno,
			:pltno,
			:pltseq,
			:dtnrtts,
			:dtnrdh,
			:knskrdh,
			:hkkdh,
			:hkkkbdh,
			:zkhkkyymd,
			:zkhkkytme,
			:frkkaflg,
			:gzbsflg,
			:hsiflg,
			:kkaysnflg,
			:tnyrkflg,
			:siyflg,
			:knsflg,
			:renjicflg,
			:soukn1flg,
			:kanrenflg,
			:bunkkuflg,
			:kesseiflg,
			:rirekiflg,
			:syougoflg,
			:keisanflg,
			:per100flg,
			:tousekflg,
			:kisyakflg,
			:kouseiflg,
			:syoungflg,
			:soukn2flg,
			:fukaptflg,
			:yobiflg01,
			:tobiflg02,
			:yobiflg03,
			:yobiflg04,
			:yobiflg05,
			:skrycda,
			:skrycdb,
			:skrycdc,
			:ksndh;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c6;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
//1.06 DELL printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD205SelectByIriNo",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD205SelectByKntNo()
 *    KEKKA レコード条件取得（検体No）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD205SelectByKntNo( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	memset( kntnost, 0, sizeof( kntnost ) );
	memcpy( kntnost, hkkjknst, sizeof( kntnost ) );
	memset( kntnoed, 0, sizeof( kntnoed ) );
	memcpy( kntnoed, hkkjkned, sizeof( kntnoed ) );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c7 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNTKETFLG,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.IRIHSMKBN,
		KKA.IRIKBN,
		KKA.KSKTKBN,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.IRIKETFLG,
		KKA.ZSSDINO,
		KKA.SSTCD,
		KKA.TRID,
		KKA.TRPOS,
		KKA.ASYRCKID,
		KKA.ASYRCKPOS,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.BKFKKBN,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKLNE,
		KKA.BSKGOK,
		KKA.BSKSEQ,
		KKA.BSKERRSTS,
		KKA.SKTDH,
		KKA.NBKMKCD,
		KKA.TSTRFLG,
		KKA.ZRCD,
		KKA.YSNLBL,
		KKA.KJNO,
		KKA.FKHKKNOHJKBN,
		KKA.TBKJNO,
		KKA.TBKJFLG,
		KKA.HTKFKHMS,
		KKA.SKFLG,
		KKA.TSKFLG,
		KKA.TKTFLG,
		KKA.JISKSBR,
		KKA.KKFLG,
		KKA.KKIRIFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.RAWDATA,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.HJKKA,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KNSPNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.TBIJKBNM,
		KKA.TBIJKBNF,
		KKA.TBIJKBNN,
		KKA.NBDOLBL,
		KKA.NBDOERR,
		KKA.YKDOLBL,
		KKA.YKDOERR,
		KKA.ETCLBL,
		KKA.ETCERR,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.BTHNO,
		KKA.PLTNO,
		KKA.PLTSEQ,
		KKA.DTNRTTS,
		KKA.DTNRDH,
		KKA.KNSKRDH,
		KKA.HKKDH,
		KKA.HKKKBDH,
		KKA.ZKHKKYYMD,
		KKA.ZKHKKYTME,
		KKA.FRKKAFLG,
		KKA.GZBSFLG,
		KKA.HSIFLG,
		KKA.KKAYSNFLG,
		KKA.TNYRKFLG,
		KKA.SIYFLG,
		KKA.KNSFLG,
		KKA.RENJICFLG,
		KKA.SOUKN1FLG,
		KKA.KANRENFLG,
		KKA.BUNKKUFLG,
		KKA.KESSEIFLG,
		KKA.RIREKIFLG,
		KKA.SYOUGOFLG,
		KKA.KEISANFLG,
		KKA.PER100FLG,
		KKA.TOUSEKFLG,
		KKA.KISYAKFLG,
		KKA.KOUSEIFLG,
		KKA.SYOUNGFLG,
		KKA.SOUKN2FLG,
		KKA.FUKAPTFLG,
		KKA.YOBIFLG01,
		KKA.TOBIFLG02,
		KKA.YOBIFLG03,
		KKA.YOBIFLG04,
		KKA.YOBIFLG05,
		KKA.SKRYCDA,
		KKA.SKRYCDB,
		KKA.SKRYCDC,
		KKA.KSNDH
	FROM
		KEKKA KKA
		LEFT OUTER JOIN VCTRLCHK CTC
			ON KKA.KNSKISYMD = CTC.KNSKISYMD
			AND KKA.BSKKBN = CTC.BSKKBN
			AND KKA.BSKLNE = CTC.BSKLNE
			AND KKA.CTRLNO = CTC.CTRLNO
		LEFT OUTER JOIN (
			SELECT
				(SELECT KKKJSRIYMD FROM SYSKNRMST) AS KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.SRIYMD		= :sriymd
		AND KKA.KNSGRP		= :knsgrp
		AND KKA.KNTNO		>= :kntnost
		AND KKA.KNTNO		<= :kntnoed
		AND KKA.KKAJKCD		= :hkkkbn
		AND KKA.SECCD		= :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X' 
				AND COALESCE(CTC.OKCNT, 0) > 0
				AND COALESCE(CTC.NGCNT, 0) = 0
				AND COALESCE(CTC.NONECNT, 0) = 0
				AND XBM.XBARMJKFLG IS NULL
			)
		)
	FOR READ ONLY;

	EXEC SQL OPEN c7;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c7 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:kntketflg,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:irihsmkbn,
			:irikbn,
			:ksktkbn,
			:utkymd,
			:irino,
			:iriketflg,
			:zssdino,
			:sstcd,
			:trid,
			:trpos,
			:asyrckid,
			:asyrckpos,
			:oyakmkcd,
			:seccd,
			:bkfkkbn,
			:smpcd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:bskseq,
			:bskerrsts,
			:sktdh,
			:nbkmkcd,
			:tstrflg,
			:zrcd,
			:ysnlbl,
			:kjno,
			:fkhkknohjkbn,
			:tbkjno,
			:tbkjflg,
			:htkfkhms,
			:skflg,
			:tskflg,
			:tktflg,
			:jisksbr,
			:kkflg,
			:kkiriflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:rawdata,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:hjkka,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:knspncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:tbijkbnm,
			:tbijkbnf,
			:tbijkbnn,
			:nbdolbl,
			:nbdoerr,
			:ykdolbl,
			:ykdoerr,
			:etclbl,
			:etcerr,
			:ctrlno,
			:knsseq,
			:bthno,
			:pltno,
			:pltseq,
			:dtnrtts,
			:dtnrdh,
			:knskrdh,
			:hkkdh,
			:hkkkbdh,
			:zkhkkyymd,
			:zkhkkytme,
			:frkkaflg,
			:gzbsflg,
			:hsiflg,
			:kkaysnflg,
			:tnyrkflg,
			:siyflg,
			:knsflg,
			:renjicflg,
			:soukn1flg,
			:kanrenflg,
			:bunkkuflg,
			:kesseiflg,
			:rirekiflg,
			:syougoflg,
			:keisanflg,
			:per100flg,
			:tousekflg,
			:kisyakflg,
			:kouseiflg,
			:syoungflg,
			:soukn2flg,
			:fukaptflg,
			:yobiflg01,
			:tobiflg02,
			:yobiflg03,
			:yobiflg04,
			:yobiflg05,
			:skrycda,
			:skrycdb,
			:skrycdc,
			:ksndh;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c7;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
//1.06 DELL printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD205SelectByKntNo",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD205Update()
 *    KEKKA レコードを更新する
 * ■引数
 *    [I]  Kekka* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD205Update( Kekka* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KekkaArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE KEKKA
    SET (
/* 1.06 DELL
		KNTKETFLG,
		IRIHSMKBN,
		IRIKBN,
		KSKTKBN,
		UTKYMD,
		IRINO,
		IRIKETFLG,
		ZSSDINO,
		SSTCD,
		TRID,
		TRPOS,
		ASYRCKID,
		ASYRCKPOS,
		OYAKMKCD,
		SECCD,
		BKFKKBN,
		SMPCD,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		BSKSEQ,
		BSKERRSTS,
		SKTDH,
		NBKMKCD,
		TSTRFLG,
		ZRCD,
		YSNLBL,
		KJNO,
		FKHKKNOHJKBN,
		TBKJNO,
		TBKJFLG,
		HTKFKHMS,
		SKFLG,
		TSKFLG,
		TKTFLG,
		JISKSBR,
		KKFLG,
		KKIRIFLG,
		KKIRILOTNO,
		HSYKFLG,
		HSKFLG,
		HHKKFLG,
		RAWDATA,
		KNSKKA1,
		KNSKKA2,
		KNSKKA2KBN,
		KKAHSKCD,
		HJKKA,
		SDI,
		KKACMT1,
		KKACMT2,
		KKAJKCD,
		PNCRGFLG,
		KNSPNCRGFLG,
		KKAKSFLG,
		IJKBNM,
		IJKBNF,
		IJKBNN,
		TBIJKBNM,
		TBIJKBNF,
		TBIJKBNN,
		NBDOLBL,
		NBDOERR,
		YKDOLBL,
		YKDOERR,
		ETCLBL,
		ETCERR,
		CTRLNO,
		KNSSEQ,
		BTHNO,
		PLTNO,
		PLTSEQ,
		DTNRTTS,
		DTNRDH,
		KNSKRDH,
		HKKKBDH,
		ZKHKKYYMD,
		ZKHKKYTME,
		FRKKAFLG,
		GZBSFLG,
		HSIFLG,
		KKAYSNFLG,
		TNYRKFLG,
		SIYFLG,
		RENJICFLG,
		SOUKN1FLG,
		KANRENFLG,
		BUNKKUFLG,
		KESSEIFLG,
		RIREKIFLG,
		SYOUGOFLG,
		KEISANFLG,
		PER100FLG,
		TOUSEKFLG,
		KISYAKFLG,
		KOUSEIFLG,
		SYOUNGFLG,
		SOUKN2FLG,
		FUKAPTFLG,
		YOBIFLG01,
		TOBIFLG02,
		YOBIFLG03,
		YOBIFLG04,
		YOBIFLG05,
		SKRYCDA,
		SKRYCDB,
		SKRYCDC,
*/
 		KKASSFLG,
 		HKKDH,
 		KNSFLG,
 		KSNDH
    ) = (
/* 1.06 DELL
		:kntketflg,
		:irihsmkbn,
		:irikbn,
		:ksktkbn,
		:utkymd,
		:irino,
		:iriketflg,
		:zssdino,
		:sstcd,
		:trid,
		:trpos,
		:asyrckid,
		:asyrckpos,
		:oyakmkcd,
		:seccd,
		:bkfkkbn,
		:smpcd,
		:bskkbn,
		:bsklne,
		:bskgok,
		:bskseq,
		:bskerrsts,
		:sktdh,
		:nbkmkcd,
		:tstrflg,
		:zrcd,
		:ysnlbl,
		:kjno,
		:fkhkknohjkbn,
		:tbkjno,
		:tbkjflg,
		:htkfkhms,
		:skflg,
		:tskflg,
		:tktflg,
		:jisksbr,
		:kkflg,
		:kkiriflg,
		:kkirilotno,
		:hsykflg,
		:hskflg,
		:hhkkflg,
		:rawdata,
		:knskka1,
		:knskka2,
		:knskka2kbn,
		:kkahskcd,
		:hjkka,
		:sdi,
		:kkacmt1,
		:kkacmt2,
		:kkajkcd,
		:pncrgflg,
		:knspncrgflg,
		:kkaksflg,
		:ijkbnm,
		:ijkbnf,
		:ijkbnn,
		:tbijkbnm,
		:tbijkbnf,
		:tbijkbnn,
		:nbdolbl,
		:nbdoerr,
		:ykdolbl,
		:ykdoerr,
		:etclbl,
		:etcerr,
		:ctrlno,
		:knsseq,
		:bthno,
		:pltno,
		:pltseq,
		:dtnrtts,
		:dtnrdh,
		:knskrdh,
		:hkkkbdh,
		:zkhkkyymd,
		:zkhkkytme,
		:frkkaflg,
		:gzbsflg,
		:hsiflg,
		:kkaysnflg,
		:tnyrkflg,
		:siyflg,
		:renjicflg,
		:soukn1flg,
		:kanrenflg,
		:bunkkuflg,
		:kesseiflg,
		:rirekiflg,
		:syougoflg,
		:keisanflg,
		:per100flg,
		:tousekflg,
		:kisyakflg,
		:kouseiflg,
		:syoungflg,
		:soukn2flg,
		:fukaptflg,
		:yobiflg01,
		:tobiflg02,
		:yobiflg03,
		:yobiflg04,
		:yobiflg05,
		:skrycda,
		:skrycdb,
		:skrycdc,
*/
		:kkassflg,
		current timestamp,
		:knsflg,
		current timestamp
    ) WHERE
		KNSKISYMD = :knskisymd AND
		SRIYMD = :sriymd AND
		KNTNO = :kntno AND
		KNSGRP         = :knsgrp         AND
		KMKCD = :kmkcd AND
		KNSSU = :knssu AND
		KNSSUEDA = :knssueda;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD205UpdateOthers()
 *    KEKKA レコードを更新する
 * ■引数
 *    [I]  Kekka* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD205UpdateOthers( Kekka* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KekkaArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE KEKKA
    SET (
		KNSFLG,
		KSNDH
    ) = (
		'M',
		current timestamp
    ) WHERE
		KNSKISYMD = :knskisymd AND
		SRIYMD = :sriymd AND
		KNTNO = :kntno AND
		KNSGRP         = :knsgrp         AND
		KMKCD = :kmkcd AND
		KNSFLG <> 'E';

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
