/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： GD105Kekka.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-03-07     H.Suyama       Create
 *  1.01     2006-04-06     H.Suyama       検索条件にセクションコード追加
 *  1.02     2006-04-12     H.Suyama       テーブル結合条件を外部結合に変更
 *	1.03     2006-04-20     H.Suyama       コントロール精度保証変更
 *	                                       分析機号機→分析機ライン変更
 *	                                       検査フラグ更新関数追加
 *	1.04     2007-06-14     T.Wajima       速度アップのため、不要な項目を検索対象から削除
 *  1.05     2009-01-26     H.Sekiya       薬剤夜間対応　コントロール範囲で報告する時も
 *                                         検査グループを見るように変更
 *  2.00     2009-05-19     K.Moriya       結果変換マスタ対応
 **********************************************************************/
#include <stdio.h>

#include "GD105Kekka.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#include "bmllog.h"				// 1.06 ADD

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

// upd 20070614 waj 速度アップのため、不要な項目を検索対象から削除

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    knskisymd[11];
	char    sriymd[11];
	char    kntno[14];
	char    knsgrp[17];
	char    kmkcd[8];
	short   knssu;
	short   knssueda;
	char    utkymd[11];
	char    irino[12];
	char    sstcd[8];
	char    oyakmkcd[8];
	char    seccd[3];
	char    smpcd[8];
	char    bskkbn[5];
	char    bskgok[7];
	char    zrcd[5];
	char    kjno[4];
	char    skflg;
	char    kkflg;
	short   kkirilotno;
	char    hsykflg;
	char    hskflg;
	char    hhkkflg;
	char    knskka1[13];
	char    knskka2[25];
	char    knskka2kbn[3];
	char    kkahskcd[4];
	char    sdi[4];
	char    kkacmt1[6];
	char    kkacmt2[6];
	char    kkajkcd;
	char    pncrgflg;
	char    kkaksflg;
	char    kkassflg;
	char    ijkbnm;
	char    ijkbnf;
	char    ijkbnn;
	sqlint32  ctrlno;
	sqlint32  knsseq;
	sqlint32  pltno;
	char    hkkdh[27];
	char    knsflg;
	char    ksndh[27];

	char    hkksjymd[11];
	sqlint32  hkksjno;
	char    hkkkbn;
	char    hkkjkn;
	char    hkkjknst[21];
	char    hkkjkned[21];
	char    hkkflnm[51];
	char    hkksjtts[9];
	char    hkkstdh[27];
	char    hkkeddh[27];
	char    tnsstdh[27];
	char    tnseddh[27];
	sqlint32  hkkssknsu;
	sqlint32  hkkhrysu;
	char    ssnmtfilid[13];
	char    hkkjkflg[3];
	char    hkkerrcode[9];

	// 範囲検索用
	sqlint32	ctrlnost;
	sqlint32	ctrlnoed;
	sqlint32	pltnost;
	sqlint32	pltnoed;
	sqlint32	knsseqst;
	sqlint32	knsseqed;
	char		irinost[12];
	char		irinoed[12];
	char		kntnost[14];
	char		kntnoed[14];

/* 2.00 2009.05.19 結果変換マスタ対応 START */
	char		skkka[24+1];
/* 2.00 2009.05.19 結果変換マスタ対応 END */
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Kekka

BmlDMMInfo	KekkaArray[] = {
	DMM_SDATE( knskisymd ),
	DMM_SDATE( sriymd ),
	DMM_SSTRING( kntno ),
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SSHORT( knssu ),
	DMM_SSHORT( knssueda ),
	DMM_SDATE( utkymd ),
	DMM_SSTRING( irino ),
	DMM_SSTRING( sstcd ),
	DMM_SSTRING( oyakmkcd ),
	DMM_SSTRING( seccd ),
	DMM_SSTRING( smpcd ),
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( bskgok ),
	DMM_SSTRING( zrcd ),
	DMM_SSTRING( kjno ),
	DMM_SCHAR( skflg ),
	DMM_SCHAR( kkflg ),
	DMM_SSHORT( kkirilotno ),
	DMM_SCHAR( hsykflg ),
	DMM_SCHAR( hskflg ),
	DMM_SCHAR( hhkkflg ),
	DMM_SSTRING( knskka1 ),
	DMM_SSTRING( knskka2 ),
	DMM_SSTRING( knskka2kbn ),
	DMM_SSTRING( kkahskcd ),
	DMM_SSTRING( sdi ),
	DMM_SSTRING( kkacmt1 ),
	DMM_SSTRING( kkacmt2 ),
	DMM_SCHAR( kkajkcd ),
	DMM_SCHAR( pncrgflg ),
	DMM_SCHAR( kkaksflg ),
	DMM_SCHAR( kkassflg ),
	DMM_SCHAR( ijkbnm ),
	DMM_SCHAR( ijkbnf ),
	DMM_SCHAR( ijkbnn ),
	DMM_SLONG( ctrlno ),
	DMM_SLONG( knsseq ),
	DMM_SLONG( pltno ),
	DMM_STIMESTAMP( hkkdh ),
	DMM_SCHAR( knsflg ),
	DMM_STIMESTAMP( ksndh ),
/* 2.00 2009.05.19 結果変換マスタ対応 START */
	DMM_SSTRING( skkka ),
/* 2.00 2009.05.19 結果変換マスタ対応 END */
	DMM_NULL
};

extern BmlDMMInfo      HkkknriArray[];

/******************************************************************************
 * ZdbKekkaGD105SelectByCtrlNo()
 *    KEKKA レコード条件取得（コントロールNo）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD105SelectByCtrlNo( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	ctrlnost = atoi( hkkjknst );
	ctrlnoed = atoi( hkkjkned );

	EXEC SQL WHENEVER SQLERROR GO TO error;

#ifdef _DEBUG
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"ctrlnost : [%d]  ctrlnoed : [%d]", ctrlnost, ctrlnoed );
#endif

	/* 1.05 2009.01.26 薬剤夜間対応 */ 
	/* コントロールNO範囲指定の時も検査グループ毎に報告できるよう変更 */
	/* VGS10101(VIEW)を使わないようにSQLを変更 */
	EXEC SQL DECLARE c3 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.SSTCD,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKGOK,
		KKA.ZRCD,
		KKA.KJNO,
		KKA.SKFLG,
		KKA.KKFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.PLTNO,
		KKA.HKKDH,
		KKA.KNSFLG,
		KKA.KSNDH,
		KKA.SKKKA
	FROM
		KEKKA KKA
		LEFT OUTER JOIN 
			(SELECT DISTINCT
				KKA_CNT.KNSKISYMD
				, KKA_CNT.BSKKBN
				, KKA_CNT.BSKLNE AS BSKGOK
				, KKA_CNT.CTRLNO
				, KKA_CNT.KNSGRP
				, COALESCE(VCHK.OKCNT, 0) AS OKCNT
				, COALESCE(VCHK.NGCNT, 0) AS NGCNT
				, COALESCE(VCHK.NONECNT, 0) AS NONECNT
				, COALESCE(KKA_ERR.FLGNGCNT, 0) AS FLGNGCNT
			FROM
				KEKKA  KKA_CNT
				LEFT OUTER JOIN VCTRLCHK VCHK
					ON KKA_CNT.KNSKISYMD = VCHK.KNSKISYMD
					AND KKA_CNT.BSKKBN = VCHK.BSKKBN
					AND KKA_CNT.BSKLNE = VCHK.BSKLNE
					AND KKA_CNT.CTRLNO = VCHK.CTRLNO
				LEFT OUTER JOIN
					(SELECT
						KNSKISYMD
						, BSKKBN
						, BSKLNE
						, CTRLNO
						, KNSGRP
						, COUNT(*) AS FLGNGCNT
					FROM
						KEKKA
					WHERE
						KNSFLG IN ('A', 'R', 'T')
						AND IRIKBN IN ('A','K')
						AND KKAJKCD = '3'
					GROUP BY
						KNSKISYMD
						, BSKKBN
						, BSKLNE
						, CTRLNO
						, KNSGRP
					) KKA_ERR 
					ON KKA_CNT.KNSKISYMD = KKA_ERR.KNSKISYMD
					AND KKA_CNT.BSKKBN = KKA_ERR.BSKKBN
					AND KKA_CNT.BSKLNE = KKA_ERR.BSKLNE
					AND KKA_CNT.CTRLNO = KKA_ERR.CTRLNO
					AND KKA_CNT.KNSGRP = KKA_ERR.KNSGRP
				WHERE
					KKA_CNT.IRIHSMKBN IN ('0', '1')
					AND KKA_CNT.KNSFLG <> 'E'
					AND KKA_CNT.KNSFLG <> 'M' 
			) AS CTC
			ON KKA.KNSKISYMD = CTC.KNSKISYMD
			AND KKA.BSKKBN = CTC.BSKKBN
			AND KKA.BSKLNE = CTC.BSKGOK
			AND KKA.CTRLNO = CTC.CTRLNO
			AND KKA.KNSGRP = CTC.KNSGRP
		LEFT OUTER JOIN (
			SELECT
				KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.KNSKISYMD	=  :knskisymd
		AND KKA.BSKKBN		=  :bskkbn
		AND KKA.BSKLNE		=  :bskgok
		AND KKA.KNSGRP		=  :knsgrp
		AND KKA.CTRLNO		>= :ctrlnost
		AND KKA.CTRLNO		<= :ctrlnoed
		AND KKA.KKAJKCD		=  :hkkkbn
		AND KKA.SECCD		=  :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X' 
				AND COALESCE(CTC.OKCNT, 0) > 0
				AND COALESCE(CTC.NGCNT, 0) = 0
				AND COALESCE(CTC.NONECNT, 0) = 0
				AND FLGNGCNT = 0
				AND XBM.XBARMJKFLG IS NULL
			)
		)
		AND NOT EXISTS (
			SELECT 
				*
			FROM
				HKHRIRAI HKHR
			WHERE
				KKA.UTKYMD = HKHR.UTKYMD 
				AND KKA.IRINO = HKHR.IRINO
				AND KKA.KMKCD = HKHR.KMKCD
				AND HKHR.HKKHRKBN NOT IN ('0','4')
		)
	FOR READ ONLY;

#ifdef _DEBUG
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"knskisymd = [%s]", knskisymd );
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"bskkbn    = [%s]", bskkbn );
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"bskgok    = [%s]", bskgok );
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"knsgrp    = [%s]", knsgrp );
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"ctrlnost  = [%d]", ctrlnost );
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"ctrlnoed  = [%d]", ctrlnoed );
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"hkkkbn    = [%c]", hkkkbn );
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"seccd     = [%s]", seccd );

	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"EXEC SQL OPEN c3 前" );
#endif

	EXEC SQL OPEN c3;

#ifdef _DEBUG
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
				"EXEC SQL OPEN c3 後" );
#endif

	while( 1 ) {
		Kekka* rec;

#ifdef _DEBUG
		sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
					"EXEC SQL FETCH c3 INTO 前" );
#endif

		EXEC SQL FETCH c3 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:utkymd,
			:irino,
			:sstcd,
			:oyakmkcd,
			:seccd,
			:smpcd,
			:bskkbn,
			:bskgok,
			:zrcd,
			:kjno,
			:skflg,
			:kkflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:ctrlno,
			:knsseq,
			:pltno,
			:hkkdh,
			:knsflg,
			:ksndh,
			:skkka;

#ifdef _DEBUG
		sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
					"EXEC SQL FETCH c3 INTO 後" );
#endif

		if( SQLCODE == 100 )
			break;

#ifdef _DEBUG
		sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
					"ZbmlRealloc 前" );
#endif

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

#ifdef _DEBUG
		sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbKekkaGD105SelectByCtrlNo", __LINE__, EXEFLG_SEL, "020",
					"ZbmlRealloc 後" );
#endif

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c3;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD105SelectByCtrlNo",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD105SelectByPltNo()
 *    KEKKA レコード条件取得（プロットNo）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD105SelectByPltNo( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	pltnost = atoi( hkkjknst );
	pltnoed = atoi( hkkjkned );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c4 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.SSTCD,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKGOK,
		KKA.ZRCD,
		KKA.KJNO,
		KKA.SKFLG,
		KKA.KKFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.PLTNO,
		KKA.HKKDH,
		KKA.KNSFLG,
		KKA.KSNDH,
		KKA.SKKKA
	FROM
		KEKKA KKA
		LEFT OUTER JOIN (
			SELECT
				KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.KNSKISYMD	=  :knskisymd
		AND KKA.BSKKBN		=  :bskkbn
		AND KKA.BSKLNE		=  :bskgok
		AND KKA.KNSGRP		=  :knsgrp
		AND KKA.KMKCD		=  :kmkcd
		AND KKA.PLTNO		>= :pltnost
		AND KKA.PLTNO		<= :pltnoed
		AND KKA.KKAJKCD		=  :hkkkbn
		AND KKA.SECCD		=  :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X'
				AND XBM.XBARMJKFLG IS NULL
			)
		)
		AND NOT EXISTS (
			SELECT 
				*
			FROM
				HKHRIRAI HKHR
			WHERE
				KKA.UTKYMD = HKHR.UTKYMD 
				AND KKA.IRINO = HKHR.IRINO
				AND KKA.KMKCD = HKHR.KMKCD
				AND HKHR.HKKHRKBN NOT IN ('0','4')
		)
	FOR READ ONLY;

	EXEC SQL OPEN c4;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c4 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:utkymd,
			:irino,
			:sstcd,
			:oyakmkcd,
			:seccd,
			:smpcd,
			:bskkbn,
			:bskgok,
			:zrcd,
			:kjno,
			:skflg,
			:kkflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:ctrlno,
			:knsseq,
			:pltno,
			:hkkdh,
			:knsflg,
			:ksndh,
			:skkka;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c4;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
//1.06 DELL printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD105SelectByPltNo",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD105SelectByKnsSeq()
 *    KEKKA レコード条件取得（検査SEQ）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD105SelectByKnsSeq( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	knsseqst = atoi( hkkjknst );
	knsseqed = atoi( hkkjkned );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c5 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.SSTCD,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKGOK,
		KKA.ZRCD,
		KKA.KJNO,
		KKA.SKFLG,
		KKA.KKFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.PLTNO,
		KKA.HKKDH,
		KKA.KNSFLG,
		KKA.KSNDH,
		KKA.SKKKA
	FROM
		KEKKA KKA
		LEFT OUTER JOIN VCTRLCHK CTC
			ON KKA.KNSKISYMD = CTC.KNSKISYMD
			AND KKA.BSKKBN = CTC.BSKKBN
			AND KKA.BSKLNE = CTC.BSKLNE
			AND KKA.CTRLNO = CTC.CTRLNO
		LEFT OUTER JOIN (
			SELECT
				KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.KNSKISYMD	=  :knskisymd
		AND KKA.KNSGRP		=  :knsgrp
		AND KKA.KNSSEQ		>= :knsseqst
		AND KKA.KNSSEQ		<= :knsseqed
		AND KKA.KKAJKCD		=  :hkkkbn
		AND KKA.SECCD		=  :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X'
				AND COALESCE(CTC.OKCNT, 0) > 0
				AND COALESCE(CTC.NGCNT, 0) = 0
				AND COALESCE(CTC.NONECNT, 0) = 0
				AND XBM.XBARMJKFLG IS NULL
			)
		)
		AND NOT EXISTS (
			SELECT 
				*
			FROM
				HKHRIRAI HKHR
			WHERE
				KKA.UTKYMD = HKHR.UTKYMD 
				AND KKA.IRINO = HKHR.IRINO
				AND KKA.KMKCD = HKHR.KMKCD
				AND HKHR.HKKHRKBN NOT IN ('0','4')
		)
	FOR READ ONLY;

	EXEC SQL OPEN c5;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c5 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:utkymd,
			:irino,
			:sstcd,
			:oyakmkcd,
			:seccd,
			:smpcd,
			:bskkbn,
			:bskgok,
			:zrcd,
			:kjno,
			:skflg,
			:kkflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:ctrlno,
			:knsseq,
			:pltno,
			:hkkdh,
			:knsflg,
			:ksndh,
			:skkka;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c5;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
//1.06 DELL printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD105SelectByKnsSeq",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD105SelectByIriNo()
 *    KEKKA レコード条件取得（依頼No）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD105SelectByIriNo( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	memset( irinost, 0, sizeof( irinost ) );
	memcpy( irinost, hkkjknst, sizeof( irinost ) );
	memset( irinoed, 0, sizeof( irinoed ) );
	memcpy( irinoed, hkkjkned, sizeof( irinoed ) );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c6 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.SSTCD,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKGOK,
		KKA.ZRCD,
		KKA.KJNO,
		KKA.SKFLG,
		KKA.KKFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.PLTNO,
		KKA.HKKDH,
		KKA.KNSFLG,
		KKA.KSNDH,
		KKA.SKKKA
	FROM
		KEKKA KKA
		LEFT OUTER JOIN VCTRLCHK CTC
			ON KKA.KNSKISYMD = CTC.KNSKISYMD
			AND KKA.BSKKBN = CTC.BSKKBN
			AND KKA.BSKLNE = CTC.BSKLNE
			AND KKA.CTRLNO = CTC.CTRLNO
		LEFT OUTER JOIN (
			SELECT
				KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.UTKYMD		=  :utkymd
		AND KKA.KNSGRP		=  :knsgrp
		AND KKA.IRINO		>= :irinost
		AND KKA.IRINO		<= :irinoed
		AND KKA.KKAJKCD		=  :hkkkbn
		AND KKA.SECCD		=  :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X'
				AND COALESCE(CTC.OKCNT, 0) > 0
				AND COALESCE(CTC.NGCNT, 0) = 0
				AND COALESCE(CTC.NONECNT, 0) = 0
				AND XBM.XBARMJKFLG IS NULL
			)
		)
		AND NOT EXISTS (
			SELECT 
				*
			FROM
				HKHRIRAI HKHR
			WHERE
				KKA.UTKYMD = HKHR.UTKYMD 
				AND KKA.IRINO = HKHR.IRINO
				AND KKA.KMKCD = HKHR.KMKCD
				AND HKHR.HKKHRKBN NOT IN ('0','4')
		)
	FOR READ ONLY;

	EXEC SQL OPEN c6;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c6 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:utkymd,
			:irino,
			:sstcd,
			:oyakmkcd,
			:seccd,
			:smpcd,
			:bskkbn,
			:bskgok,
			:zrcd,
			:kjno,
			:skflg,
			:kkflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:ctrlno,
			:knsseq,
			:pltno,
			:hkkdh,
			:knsflg,
			:ksndh,
			:skkka;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c6;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
//1.06 DELL printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD105SelectByIriNo",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD105SelectByKntNo()
 *    KEKKA レコード条件取得（検体No）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD105SelectByKntNo( Hkkknri* pKey, Kekka** arrayOut, int* numOut )
{
	Kekka*      array = NULL;
	int         num = 0;

	if( !pKey )
		return HRC_NULL_POINTER;

	if( !ZbmlMapStructToHost( (char*)pKey, HkkknriArray ) )
		return HRC_INVALID_VALUE;

	memset( kntnost, 0, sizeof( kntnost ) );
	memcpy( kntnost, hkkjknst, sizeof( kntnost ) );
	memset( kntnoed, 0, sizeof( kntnoed ) );
	memcpy( kntnoed, hkkjkned, sizeof( kntnoed ) );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	EXEC SQL DECLARE c7 CURSOR FOR
	SELECT
		KKA.KNSKISYMD,
		KKA.SRIYMD,
		KKA.KNTNO,
		KKA.KNSGRP,
		KKA.KMKCD,
		KKA.KNSSU,
		KKA.KNSSUEDA,
		KKA.UTKYMD,
		KKA.IRINO,
		KKA.SSTCD,
		KKA.OYAKMKCD,
		KKA.SECCD,
		KKA.SMPCD,
		KKA.BSKKBN,
		KKA.BSKGOK,
		KKA.ZRCD,
		KKA.KJNO,
		KKA.SKFLG,
		KKA.KKFLG,
		KKA.KKIRILOTNO,
		KKA.HSYKFLG,
		KKA.HSKFLG,
		KKA.HHKKFLG,
		KKA.KNSKKA1,
		KKA.KNSKKA2,
		KKA.KNSKKA2KBN,
		KKA.KKAHSKCD,
		KKA.SDI,
		KKA.KKACMT1,
		KKA.KKACMT2,
		KKA.KKAJKCD,
		KKA.PNCRGFLG,
		KKA.KKAKSFLG,
		KKA.KKASSFLG,
		KKA.IJKBNM,
		KKA.IJKBNF,
		KKA.IJKBNN,
		KKA.CTRLNO,
		KKA.KNSSEQ,
		KKA.PLTNO,
		KKA.HKKDH,
		KKA.KNSFLG,
		KKA.KSNDH,
		KKA.SKKKA
	FROM
		KEKKA KKA
		LEFT OUTER JOIN VCTRLCHK CTC
			ON KKA.KNSKISYMD = CTC.KNSKISYMD
			AND KKA.BSKKBN = CTC.BSKKBN
			AND KKA.BSKLNE = CTC.BSKLNE
			AND KKA.CTRLNO = CTC.CTRLNO
		LEFT OUTER JOIN (
			SELECT
				KNSKISYMD,
				BSKKBN,
				BSKGOK,
				KNSGRP,
				KMKCD,
				PLTNO,
				XBARMJTKBN,
				XBARMJKFLG
			FROM
				XBARM
		) XBM
			ON  KKA.KNSKISYMD	= XBM.KNSKISYMD
			AND KKA.BSKKBN		= XBM.BSKKBN
			AND KKA.BSKGOK		= XBM.BSKGOK
			AND KKA.KNSGRP		= XBM.KNSGRP
			AND KKA.KMKCD		= XBM.KMKCD
			AND KKA.PLTNO		= XBM.PLTNO
			AND KKA.KNSFLG 		= 'X'
			AND XBM.XBARMJKFLG	= '0'
			AND XBM.XBARMJTKBN IN ('K','T')
	WHERE
			KKA.SRIYMD		=  :sriymd
		AND KKA.KNSGRP		=  :knsgrp
		AND KKA.KNTNO		>= :kntnost
		AND KKA.KNTNO		<= :kntnoed
		AND KKA.KKAJKCD		=  :hkkkbn
		AND KKA.SECCD		=  :seccd
		AND ( KKA.IRIHSMKBN IN ('0', '1') )
		AND (
			KKA.KNSFLG = 'S'
			OR
			(
				KKA.KNSFLG = 'X'
				AND COALESCE(CTC.OKCNT, 0) > 0
				AND COALESCE(CTC.NGCNT, 0) = 0
				AND COALESCE(CTC.NONECNT, 0) = 0
				AND XBM.XBARMJKFLG IS NULL
			)
		)
		AND NOT EXISTS (
			SELECT 
				*
			FROM
				HKHRIRAI HKHR
			WHERE
				KKA.UTKYMD = HKHR.UTKYMD 
				AND KKA.IRINO = HKHR.IRINO
				AND KKA.KMKCD = HKHR.KMKCD
				AND HKHR.HKKHRKBN NOT IN ('0','4')
		)
	FOR READ ONLY;

	EXEC SQL OPEN c7;

	while( 1 ) {
		Kekka* rec;

		EXEC SQL FETCH c7 INTO
			:knskisymd,
			:sriymd,
			:kntno,
			:knsgrp,
			:kmkcd,
			:knssu,
			:knssueda,
			:utkymd,
			:irino,
			:sstcd,
			:oyakmkcd,
			:seccd,
			:smpcd,
			:bskkbn,
			:bskgok,
			:zrcd,
			:kjno,
			:skflg,
			:kkflg,
			:kkirilotno,
			:hsykflg,
			:hskflg,
			:hhkkflg,
			:knskka1,
			:knskka2,
			:knskka2kbn,
			:kkahskcd,
			:sdi,
			:kkacmt1,
			:kkacmt2,
			:kkajkcd,
			:pncrgflg,
			:kkaksflg,
			:kkassflg,
			:ijkbnm,
			:ijkbnf,
			:ijkbnn,
			:ctrlno,
			:knsseq,
			:pltno,
			:hkkdh,
			:knsflg,
			:ksndh,
			:skkka;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (Kekka*)ZbmlRealloc( array,
										 sizeof( Kekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( Kekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, KekkaArray );
	}

	EXEC SQL CLOSE c7;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
//1.06 DELL printf("SQLERR : [%s]\n", sqlca.sqlerrmc);
	// 1.06 DEBUG    LOG
    sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaGD105SelectByKntNo",
                __LINE__,
                EXEFLG_SEL, "020",
                "SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD105Update()
 *    KEKKA レコードを更新する
 * ■引数
 *    [I]  Kekka* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD105Update( Kekka* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KekkaArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE KEKKA
    SET (
/* 1.06 DELL
		UTKYMD,
		IRINO,
		SSTCD,
		OYAKMKCD,
		SECCD,
		SMPCD,
		BSKKBN,
		BSKGOK,
		ZRCD,
		KJNO,
		SKFLG,
		KKFLG,
		KKIRILOTNO,
		HSYKFLG,
		HSKFLG,
		HHKKFLG,
		KNSKKA1,
		KNSKKA2,
		KNSKKA2KBN,
		KKAHSKCD,
		SDI,
		KKACMT1,
		KKACMT2,
		KKAJKCD,
		PNCRGFLG,
		KKAKSFLG,
		IJKBNM,
		IJKBNF,
		IJKBNN,
		CTRLNO,
		KNSSEQ,
		PLTNO,
*/
 		KKASSFLG,
 		HKKDH,
 		KNSFLG,
 		KSNDH
    ) = (
/* 1.06 DELL
		:utkymd,
		:irino,
		:sstcd,
		:oyakmkcd,
		:seccd,
		:smpcd,
		:bskkbn,
		:bskgok,
		:zrcd,
		:kjno,
		:skflg,
		:kkflg,
		:kkirilotno,
		:hsykflg,
		:hskflg,
		:hhkkflg,
		:knskka1,
		:knskka2,
		:knskka2kbn,
		:kkahskcd,
		:sdi,
		:kkacmt1,
		:kkacmt2,
		:kkajkcd,
		:pncrgflg,
		:kkaksflg,
		:ijkbnm,
		:ijkbnf,
		:ijkbnn,
		:ctrlno,
		:knsseq,
		:pltno,
*/
		:kkassflg,
		current timestamp,
		:knsflg,
		current timestamp
    ) WHERE
		KNSKISYMD = :knskisymd AND
		SRIYMD = :sriymd AND
		KNTNO = :kntno AND
		KNSGRP = :knsgrp AND
		KMKCD = :kmkcd AND
		KNSSU = :knssu AND
		KNSSUEDA = :knssueda;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKekkaGD105UpdateOthers()
 *    KEKKA レコードを更新する
 * ■引数
 *    [I]  Kekka* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaGD105UpdateOthers( Kekka* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KekkaArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE KEKKA
    SET (
		KNSFLG,
		KSNDH
    ) = (
		'M',
		current timestamp
    ) WHERE
		KNSKISYMD = :knskisymd AND
		SRIYMD = :sriymd AND
		KNTNO = :kntno AND
		KNSGRP = :knsgrp AND
		KMKCD = :kmkcd AND
		KNSFLG <> 'E';

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
