/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： GD105KekkaConv.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2009-05-19     K.Moriya       結果変換マスタ対応
 **********************************************************************/
#include <stdio.h>

#include "GD105KekkaConv.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#include "bmllog.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    knskisymd[11];
	char    sriymd[11];
	char    kntno[14];
	char    knsgrp[17];
	char    kmkcd[8];
	short   knssu;
	short   knssueda;
	char    knskka1[13];
	char    knskka2[25];
	char    knskka2kbn[3];
	char    kkahskcd[4];
	char	dtnrtts[8+1];
	char	skkka[24+1];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	KekkaConv

BmlDMMInfo	KekkaConvArray[] = {
	DMM_SDATE( knskisymd ),
	DMM_SDATE( sriymd ),
	DMM_SSTRING( kntno ),
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SSHORT( knssu ),
	DMM_SSHORT( knssueda ),
	DMM_SSTRING( knskka1 ),
	DMM_SSTRING( knskka2 ),
	DMM_SSTRING( knskka2kbn ),
	DMM_SSTRING( kkahskcd ),
	DMM_SSTRING( dtnrtts ),
	DMM_SSTRING( skkka ),
	DMM_NULL
};

/******************************************************************************
 * dGD105UpdKekkaConv()
 *    KEKKA レコードを更新する
 * ■引数
 *    [I]  KekkaConv* rec           更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL(0)      正常終了
 *           HRC_SQL_NOT_FOUND(100) 対象レコードなし
 *           HRC_NULL_POINTER(-3)   パラメータエラー
 *           HRC_INVALID_VALUE(-1)  設定値不正
 *           HRC_SQL_ERR(-2)        DBエラー
 ******************************************************************************/
long dGD105UpdKekkaConv( KekkaConv* rec )
{
#ifdef _DEBUG
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				 "● dGD105UpdKekkaConv 入った" ) ;
#endif

	if( !rec ) {
		return HRC_NULL_POINTER;
	}

	if( !ZbmlMapStructToHost( (char*)rec, KekkaConvArray ) ) {
		return HRC_INVALID_VALUE;
	}

#ifdef _DEBUG
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    knskisymd  = [%s]", knskisymd ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    sriymd     = [%s]", sriymd ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    kntno      = [%s]", kntno ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    knsgrp     = [%s]", knsgrp ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    kmkcd      = [%s]", kmkcd ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    knssu      = [%d]", knssu ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    knssueda   = [%d]", knssueda ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    knskka1    = [%s]", knskka1 ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    knskka2    = [%s]", knskka2 ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    knskka2kbn = [%s]", knskka2kbn ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    kkahskcd   = [%s]", kkahskcd ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    dtnrtts    = [%s]", dtnrtts ) ;
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"    skkka      = [%s]", skkka ) ;
#endif

	EXEC SQL WHENEVER NOT FOUND GO TO notfound;
	EXEC SQL WHENEVER SQLERROR  GO TO error;

	EXEC SQL UPDATE KEKKA
	SET
	(
		KNSKKA1,
		KNSKKA2,
		KNSKKA2KBN,
		KKAHSKCD,
		DTNRTTS,
		SKKKA
	) = (
		:knskka1,
		:knskka2,
		:knskka2kbn,
		:kkahskcd,
		:dtnrtts,
		:skkka
	)
	WHERE
		KNSKISYMD = :knskisymd AND
		SRIYMD = :sriymd AND
		KNTNO = :kntno AND
		KNSGRP = :knsgrp AND
		KMKCD = :kmkcd AND
		KNSSU = :knssu AND
		KNSSUEDA = :knssueda;

#ifdef _DEBUG
	sFncPutLog ( TRCKIND_DEBUG, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				 "● dGD105UpdKekkaConv 出る" ) ;
#endif

	return HRC_SQL_NORMAL;

notfound:
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	sFncPutLog( TRCKIND_ERROR, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"SQLERR : [%s]", sqlca.sqlerrmc );

	return HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;

	sFncPutLog( TRCKIND_ERROR, __FILE__, "dGD105UpdKekkaConv", __LINE__, EXEFLG_UPD, "020",
				"SQLERR : [%s]", sqlca.sqlerrmc );

	return sqlca.sqlcode;
}
/** End of File *********************************************************/
