/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： GD105Hkkknri.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-03-06                    Create
 *  1.12     2006-09-04                    INTEC.INC エラー時保留件数更新
 **********************************************************************/
#include <stdio.h>

#include "GD105Hkkknri.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#include "bmllog.h"					// 1.06 ADD

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    hkksjymd[11];
	sqlint32  hkksjno;
	char    hkkkbn;
	char    hkkjkn;
	char    knskisymd[11];
	char    utkymd[11];
	char    sriymd[11];
	char    knsgrp[17];
	char    kmkcd[8];
	char    bskkbn[5];
	char    bskgok[7];
	char    hkkjknst[21];
	char    hkkjkned[21];
	char    stsflnm[51];
	char    seccd[3];
	char    hkkflnm[51];
	char    hkksjtts[9];
	char    hkkdh[27];
	char    hkkstdh[27];
	char    hkkeddh[27];
	char    tnsstdh[27];
	char    tnseddh[27];
	sqlint32  hkkssknsu;
	sqlint32  hkkhrysu;
	char    ssnmtfilid[13];
	char    hkkjkflg[3];
	char    hkkerrcode[9];
	short   kkirilotno;
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Hkkknri

BmlDMMInfo	HkkknriArray[] = {
	DMM_SDATE( hkksjymd ),
	DMM_SLONG( hkksjno ),
	DMM_SCHAR( hkkkbn ),
	DMM_SCHAR( hkkjkn ),
	DMM_SDATE( knskisymd ),
	DMM_SDATE( utkymd ),
	DMM_SDATE( sriymd ),
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( bskgok ),
	DMM_SSTRING( hkkjknst ),
	DMM_SSTRING( hkkjkned ),
	DMM_SSTRING( stsflnm ),
	DMM_SSTRING( seccd ),
	DMM_SSTRING( hkkflnm ),
	DMM_SSTRING( hkksjtts ),
	DMM_STIMESTAMP( hkkdh ),
	DMM_STIMESTAMP( hkkstdh ),
	DMM_STIMESTAMP( hkkeddh ),
	DMM_STIMESTAMP( tnsstdh ),
	DMM_STIMESTAMP( tnseddh ),
	DMM_SLONG( hkkssknsu ),
	DMM_SLONG( hkkhrysu ),
	DMM_SSTRING( ssnmtfilid ),
	DMM_SSTRING( hkkjkflg ),
	DMM_SSTRING( hkkerrcode ),
	DMM_SSHORT( kkirilotno ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbHkkknriGD105SelectAll()
 *    HKKKNRI レコード全件取得
 * ■引数
 *    [O]  Hkkknri** arrayOut   取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbHkkknriGD105SelectAll( Hkkknri** arrayOut, int* numOut )
{
    Hkkknri*    array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		HKKSJYMD,
		HKKSJNO,
		HKKKBN,
		HKKJKN,
		KNSKISYMD,
		UTKYMD,
		SRIYMD,
		KNSGRP,
		KMKCD,
		BSKKBN,
		BSKGOK,
		HKKJKNST,
		HKKJKNED,
		STSFLNM,
		SECCD,
		HKKFLNM,
		HKKSJTTS,
		HKKDH,
		HKKSTDH,
		HKKEDDH,
		TNSSTDH,
		TNSEDDH,
		HKKSSKNSU,
		HKKHRYSU,
		SSNMTFILID,
		HKKJKFLG,
		HKKERRCODE,
		KKIRILOTNO,
		KSNDH
	FROM
		HKKKNRI
	WHERE
			( HKKJKN <> '7' AND HKKJKFLG = '0' )
		OR  ( HKKJKN = '8' AND HKKJKFLG = '3' )
		FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Hkkknri* rec;

        EXEC SQL FETCH c1 INTO
			:hkksjymd,
			:hkksjno,
			:hkkkbn,
			:hkkjkn,
			:knskisymd,
			:utkymd,
			:sriymd,
			:knsgrp,
			:kmkcd,
			:bskkbn,
			:bskgok,
			:hkkjknst,
			:hkkjkned,
			:stsflnm,
			:seccd,
			:hkkflnm,
			:hkksjtts,
			:hkkdh,
			:hkkstdh,
			:hkkeddh,
			:tnsstdh,
			:tnseddh,
			:hkkssknsu,
			:hkkhrysu,
			:ssnmtfilid,
			:hkkjkflg,
			:hkkerrcode,
			:kkirilotno,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Hkkknri*)ZbmlRealloc( array,
                                    sizeof( Hkkknri ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Hkkknri ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, HkkknriArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbHkkknriGD105UpdateNormal()
 *    HKKKNRI レコードを更新する
 * ■引数
 *    [I]  Hkkknri* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbHkkknriGD105UpdateNormal( Hkkknri* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, HkkknriArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE HKKKNRI
    SET (
		STSFLNM,
		HKKFLNM,
		HKKSTDH,
		HKKEDDH,
		HKKSSKNSU,
		HKKHRYSU,
		SSNMTFILID,
		HKKJKFLG,
		KSNDH
    ) = (
		:stsflnm,
		:hkkflnm,
		:hkkstdh,
		:hkkeddh,
		:hkkssknsu,
		:hkkhrysu,
		:ssnmtfilid,
		:hkkjkflg,
		current timestamp
    ) WHERE
		HKKSJYMD = :hkksjymd AND
		HKKSJNO = :hkksjno;

#ifdef _DEBUG
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbHkkknriGD105UpdateNormal", __LINE__, EXEFLG_UPD, "00000000",
				"Update HRC_SQL_NORMAL" );
#endif

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

	sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbHkkknriGD105UpdateNormal", __LINE__, EXEFLG_UPD, "020",
				"Update HRC_SQL_NOT_FOUND" );

    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;

	sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbHkkknriGD105UpdateNormal", __LINE__, EXEFLG_UPD, "020",
				"Update [%d-%s]", sqlca.sqlcode, sqlca.sqlerrmc );

    return sqlca.sqlcode;
}


/******************************************************************************
 * ZdbHkkknriGD105UpdateSts()
 *    HKKKNRI レコードを更新する
 * ■引数
 *    [I]  Hkkknri* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbHkkknriGD105UpdateSts( Hkkknri* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, HkkknriArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE HKKKNRI
    SET (
		HKKJKFLG,
		HKKERRCODE,
		HKKSSKNSU,
		HKKHRYSU,
		KSNDH
    ) = (
		:hkkjkflg,
		:hkkerrcode,
		:hkkssknsu,
		:hkkhrysu,
		current timestamp
    ) WHERE
		HKKSJYMD = :hkksjymd AND
		HKKSJNO = :hkksjno;

#ifdef _DEBUG
	sFncPutLog( TRCKIND_DEBUG, __FILE__, "ZdbHkkknriGD105UpdateSts", __LINE__, EXEFLG_UPD, "00000000",
				"Update HRC_SQL_NORMAL" );
#endif

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

	sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbHkkknriGD105UpdateSts", __LINE__, EXEFLG_UPD, "020",
				"Update HRC_SQL_NOT_FOUND" );

    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;

	sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbHkkknriGD105UpdateSts", __LINE__, EXEFLG_UPD, "020",
				"Update [%d-%s]", sqlca.sqlcode, sqlca.sqlerrmc );

    return sqlca.sqlcode;
}
/** End of File *********************************************************/
