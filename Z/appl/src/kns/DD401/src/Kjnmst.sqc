/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Kjnmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "Kjnmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    kmkcd[8];
	char    kjno[4];
	char    kjsdino[3];
	char    zrcd[5];
	char    agerngkbn[3];
	char    etckbn[4];
	char    nichilw[6];
	char    nichihi[6];
	char    kjnmlw[9];
	char    kjnmhi[9];
	char    kjnflw[9];
	char    kjnfhi[9];
	char    kjnelw[9];
	char    kjnehi[9];
	char    genmlw[9];
	char    genmhi[9];
	char    genflw[9];
	char    genfhi[9];
	char    genelw[9];
	char    genehi[9];
	short   kjsstnksu;
	char    kjnmhkn[25];
	char    kjnmhkj[25];
	char    kjnfhkn[25];
	char    kjnfhkj[25];
	char    kjnohkn[25];
	char    kjnohkj[25];
	char    lwm1[9];
	char    lwm2[9];
	char    kjm1[9];
	char    kjm2[9];
	char    him1[9];
	char    him2[9];
	char    lwf1[9];
	char    lwf2[9];
	char    kjnnaf1[9];
	char    kjnnaf2[9];
	char    hif1[9];
	char    hif2[9];
	char    lwe1[9];
	char    lwe2[9];
	char    kje1[9];
	char    kje2[9];
	char    hie1[9];
	char    hie2[9];
	char    tankn[17];
	char    tankj[17];
	char    stjyken[61];
	char    kymstjn;
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Kjnmst

BmlDMMInfo	KjnmstArray1[] = {
	DMM_SSTRING( kmkcd ),
	DMM_SSTRING( kjno ),
	DMM_SSTRING( kjsdino ),
	DMM_SSTRING( zrcd ),
	DMM_SSTRING( agerngkbn ),
	DMM_SSTRING( etckbn ),
	DMM_SSTRING( nichilw ),
	DMM_SSTRING( nichihi ),
	DMM_SSTRING( kjnmlw ),
	DMM_SSTRING( kjnmhi ),
	DMM_SSTRING( kjnflw ),
	DMM_SSTRING( kjnfhi ),
	DMM_SSTRING( kjnelw ),
	DMM_SSTRING( kjnehi ),
	DMM_SSTRING( genmlw ),
	DMM_SSTRING( genmhi ),
	DMM_SSTRING( genflw ),
	DMM_SSTRING( genfhi ),
	DMM_SSTRING( genelw ),
	DMM_SSTRING( genehi ),
	DMM_SSHORT( kjsstnksu ),
	DMM_SSTRING( kjnmhkn ),
	DMM_SSTRING( kjnmhkj ),
	DMM_SSTRING( kjnfhkn ),
	DMM_SSTRING( kjnfhkj ),
	DMM_SSTRING( kjnohkn ),
	DMM_SSTRING( kjnohkj ),
	DMM_SSTRING( lwm1 ),
	DMM_SSTRING( lwm2 ),
	DMM_SSTRING( kjm1 ),
	DMM_SSTRING( kjm2 ),
	DMM_SSTRING( him1 ),
	DMM_SSTRING( him2 ),
	DMM_SSTRING( lwf1 ),
	DMM_SSTRING( lwf2 ),
	DMM_SSTRING( kjnnaf1 ),
	DMM_SSTRING( kjnnaf2 ),
	DMM_SSTRING( hif1 ),
	DMM_SSTRING( hif2 ),
	DMM_SSTRING( lwe1 ),
	DMM_SSTRING( lwe2 ),
	DMM_SSTRING( kje1 ),
	DMM_SSTRING( kje2 ),
	DMM_SSTRING( hie1 ),
	DMM_SSTRING( hie2 ),
	DMM_SSTRING( tankn ),
	DMM_SSTRING( tankj ),
	DMM_SSTRING( stjyken ),
	DMM_SCHAR( kymstjn ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbKjnmstSelectKey()
 *    KJNMST レコードKey条件取得
 * ■引数
 *    [I]  Kjnmst* pKey       取得するレコードのキー
 *    [O]  Kjnmst** arrayOut    取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKjnmstSelectKey2( Kjnmst* pKey, Kjnmst** arrayOut, int* numOut )
{
    Kjnmst*     array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, KjnmstArray1 ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		KMKCD,
		KJNO,
		KJSDINO,
		ZRCD,
		AGERNGKBN,
		ETCKBN,
		NICHILW,
		NICHIHI,
		KJNMLW,
		KJNMHI,
		KJNFLW,
		KJNFHI,
		KJNELW,
		KJNEHI,
		GENMLW,
		GENMHI,
		GENFLW,
		GENFHI,
		GENELW,
		GENEHI,
		KJSSTNKSU,
		KJNMHKN,
		KJNMHKJ,
		KJNFHKN,
		KJNFHKJ,
		KJNOHKN,
		KJNOHKJ,
		LWM1,
		LWM2,
		KJM1,
		KJM2,
		HIM1,
		HIM2,
		LWF1,
		LWF2,
		KJNNAF1,
		KJNNAF2,
		HIF1,
		HIF2,
		LWE1,
		LWE2,
		KJE1,
		KJE2,
		HIE1,
		HIE2,
		TANKN,
		TANKJ,
		STJYKEN,
		KYMSTJN,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        KJNMST
    WHERE
		KMKCD = :kmkcd AND
		KJNO = :kjno AND
		KAIYMD <= CURRENT DATE FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Kjnmst* rec;

        EXEC SQL FETCH c2 INTO
			:kmkcd,
			:kjno,
			:kjsdino,
			:zrcd,
			:agerngkbn,
			:etckbn,
			:nichilw,
			:nichihi,
			:kjnmlw,
			:kjnmhi,
			:kjnflw,
			:kjnfhi,
			:kjnelw,
			:kjnehi,
			:genmlw,
			:genmhi,
			:genflw,
			:genfhi,
			:genelw,
			:genehi,
			:kjsstnksu,
			:kjnmhkn,
			:kjnmhkj,
			:kjnfhkn,
			:kjnfhkj,
			:kjnohkn,
			:kjnohkj,
			:lwm1,
			:lwm2,
			:kjm1,
			:kjm2,
			:him1,
			:him2,
			:lwf1,
			:lwf2,
			:kjnnaf1,
			:kjnnaf2,
			:hif1,
			:hif2,
			:lwe1,
			:lwe2,
			:kje1,
			:kje2,
			:hie1,
			:hie2,
			:tankn,
			:tankj,
			:stjyken,
			:kymstjn,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Kjnmst*)ZbmlRealloc( array,
                                    sizeof( Kjnmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Kjnmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KjnmstArray1 );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKjnmstSelectKey3()
 *    KJNMST レコードKey条件取得(kjno=最大値)
 * ■引数
 *    [I]  Kjnmst* pKey       取得するレコードのキー
 *    [O]  Kjnmst** arrayOut    取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKjnmstSelectKey3( Kjnmst* pKey, Kjnmst** arrayOut, int* numOut )
{
    Kjnmst*     array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, KjnmstArray1 ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c3 CURSOR FOR
    SELECT
		KMKCD,
		KJNO,
		KJSDINO,
		ZRCD,
		AGERNGKBN,
		ETCKBN,
		NICHILW,
		NICHIHI,
		KJNMLW,
		KJNMHI,
		KJNFLW,
		KJNFHI,
		KJNELW,
		KJNEHI,
		GENMLW,
		GENMHI,
		GENFLW,
		GENFHI,
		GENELW,
		GENEHI,
		KJSSTNKSU,
		KJNMHKN,
		KJNMHKJ,
		KJNFHKN,
		KJNFHKJ,
		KJNOHKN,
		KJNOHKJ,
		LWM1,
		LWM2,
		KJM1,
		KJM2,
		HIM1,
		HIM2,
		LWF1,
		LWF2,
		KJNNAF1,
		KJNNAF2,
		HIF1,
		HIF2,
		LWE1,
		LWE2,
		KJE1,
		KJE2,
		HIE1,
		HIE2,
		TANKN,
		TANKJ,
		STJYKEN,
		KYMSTJN,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        KJNMST
    WHERE
		KMKCD = :kmkcd AND
		KJNO = (select max(KJNO) from KJNMST where KMKCD=:kmkcd and KAIYMD <= CURRENT DATE) AND
		KAIYMD <= CURRENT DATE FOR READ ONLY;

    EXEC SQL OPEN c3;

    while( 1 ) {
        Kjnmst* rec;

        EXEC SQL FETCH c2 INTO
			:kmkcd,
			:kjno,
			:kjsdino,
			:zrcd,
			:agerngkbn,
			:etckbn,
			:nichilw,
			:nichihi,
			:kjnmlw,
			:kjnmhi,
			:kjnflw,
			:kjnfhi,
			:kjnelw,
			:kjnehi,
			:genmlw,
			:genmhi,
			:genflw,
			:genfhi,
			:genelw,
			:genehi,
			:kjsstnksu,
			:kjnmhkn,
			:kjnmhkj,
			:kjnfhkn,
			:kjnfhkj,
			:kjnohkn,
			:kjnohkj,
			:lwm1,
			:lwm2,
			:kjm1,
			:kjm2,
			:him1,
			:him2,
			:lwf1,
			:lwf2,
			:kjnnaf1,
			:kjnnaf2,
			:hif1,
			:hif2,
			:lwe1,
			:lwe2,
			:kje1,
			:kje2,
			:hie1,
			:hie2,
			:tankn,
			:tankj,
			:stjyken,
			:kymstjn,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Kjnmst*)ZbmlRealloc( array,
                                    sizeof( Kjnmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Kjnmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KjnmstArray1 );
    }

    EXEC SQL CLOSE c3;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/** End of File *********************************************************/
