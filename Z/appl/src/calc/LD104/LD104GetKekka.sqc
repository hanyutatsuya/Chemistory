/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： LD104GetKekka.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 **********************************************************************/
#include <stdio.h>

#include "LD104GetKekka.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#include "bmllog.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    utkymd[11];
	char    irino[12];
	char    kmkcd[8];
	char    sriymd[11];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	GetKekka

BmlDMMInfo	GetKekkaArray[] = {
	DMM_SDATE( utkymd ),
	DMM_SSTRING( irino ),
	DMM_SSTRING( kmkcd ),
	DMM_NULL
};

/******************************************************************************
 * ZdbKekkaLD104Select()
 *    KEKKA レコード条件取得（検体No）
 * ■引数
 *    [I]  Kekka* pKey       取得するレコードのキー
 *    [O]  Kekka** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKekkaLD104Select( char* pSysknrmst, GetKekka** arrayOut, int* numOut )
{
	GetKekka*	array = NULL;
	int		num = 0;

	memset( sriymd, 0, sizeof( sriymd ) );
	strcpy( sriymd, pSysknrmst );

	EXEC SQL WHENEVER SQLERROR GO TO error;

	/* 計算元項目のうち、ケミストリーに依頼が来ておらず、結果取得済みではない項目 */
	EXEC SQL DECLARE c7 CURSOR FOR
	SELECT
		IRI.UTKYMD,
		IRI.IRINO,
		GETKKA.YKKMKCD
	FROM
		GETSYSKKAMST GETKKA
		INNER JOIN IRAI IRI
			 ON IRI.KMKCD = GETKKA.KMKCD
			AND IRI.UTKYMD >= GETKKA.KAIYMD
			AND IRI.UTKYMD <= GETKKA.HAIYMD
	WHERE
		IRI.SRIYMD >= :sriymd
		AND NOT EXISTS (
				SELECT
					*
				FROM
					KEKKA KKA
				WHERE
					    IRI.UTKYMD = KKA.UTKYMD
					AND IRI.IRINO = KKA.IRINO
					AND IRI.KMKCD = KKA.KMKCD
			)
		AND NOT EXISTS (
				SELECT
					*
				FROM
					OTHERKKA OTHKKA
				WHERE
					    IRI.UTKYMD = OTHKKA.UTKYMD
					AND IRI.IRINO = OTHKKA.IRINO
					AND OTHKKA.KMKCD = GETKKA.YKKMKCD
			)
		AND NOT EXISTS (
				SELECT
					*
				FROM
					IRAI IRI_MOTO
				WHERE
					     IRI_MOTO.UTKYMD = IRI.UTKYMD
					 AND IRI_MOTO.IRINO = IRI.IRINO
					 AND IRI_MOTO.KMKCD = GETKKA.YKKMKCD
		)
	ORDER BY IRI.UTKYMD,IRI.IRINO,IRI.KMKCD,GETKKA.YKKMKCD
	FOR READ ONLY;

	EXEC SQL OPEN c7;

	while( 1 ) {
		GetKekka* rec;

		EXEC SQL FETCH c7 INTO
			:utkymd,
			:irino,
			:kmkcd;

		if( SQLCODE == 100 )
			break;

		if( num % ALLOC_UNIT == 0 ) {
			array = (GetKekka*)ZbmlRealloc( array, sizeof( GetKekka ) * ( num + ALLOC_UNIT ) );
			memset( array + num, 0, sizeof( GetKekka ) * ALLOC_UNIT );
		}

		rec = array + num++;
		ZbmlMapHostToStruct( (char*)rec, GetKekkaArray );
	}

	EXEC SQL CLOSE c7;

	*arrayOut = array;
	*numOut   = num;

	return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;

    	sFncPutLog( TRCKIND_ERROR, __FILE__, "ZdbKekkaLD104Select", __LINE__, EXEFLG_SEL, "020", "SQLERR : [%s]", sqlca.sqlerrmc ); 
	return sqlca.sqlcode;
}

/** End of File *********************************************************/
