/******************************************************************************/
/* 　ＢＭＬ様向け検査システム                                                 */
/*                                                                            */
/* 　システム名：次世代システム                                               */
/* 　ファイル名：LD101_db.sqc                                                 */
/* 　概　　　要：                                                             */
/******************************************************************************/
/*  Ver.     日付           名前           修正内容                           */
/* -------------------------------------------------------------------------- */
/*  1.00     2019/01/15                    新規作成                           */
/******************************************************************************/

/******************************************************************************/
/* インクルード宣言                                                           */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "sql.h"
#include "bmllog.h"
#include "LD101.h"

EXEC SQL INCLUDE SQLCA;

/******************************************************************************/
/* グローバル宣言                                                             */
/******************************************************************************/
EXEC SQL BEGIN DECLARE SECTION;
// <<   情報      >>
struct {
        char    kjnsriymd[10+1];	// 1 基準処理日
        char    iriendflg[1+1];		// 2 依頼ＥＮＤフラグ
        char    bchendflg[1+1];		// 2 分注ＥＮＤフラグ
        char    unyflg[1+1];		// 4 運用フラグ
} sqlSYSKNR;

// <<   情報      >>
struct {
        char    utkymd[10+1];           // 1  ＢＭＬ受付年月日
        char    irino[11+1];            // 2  依頼書Ｎｏ
        char    knsgrp[16+1];           // 3  検査グループ
        char    kmkcd[7+1];             // 4  項目コード
        char    kmknmj[46+1];           //
	char	sstcd[7+1];             //
	char	sstssnmj[40+1];         //
	char	knjnmn[60+1];           //
	char	krtno[40+1];            //
        char    sc[5+1];                // 5  身長
        char    scflg[1+1];             // 6  身長 チェックフラグ
        char    tj[5+1];                // 7  体重
        char    tjflg[1+1];             // 8  体重  チェックフラグ
        char    tjtni[1+1];             // 9  体重区分
        char    tjtniflg[1+1];          // 10 体重区分チェックフラグ
        char    sbtkbn[1+1];            // 11 性別区分
        char    sbtkbnflg[1+1];         // 12 性別区分チェックフラグ
        char    age[3+1];               // 13 年齢
        char    ageflg[1+1];            // 14 年齢チェックフラグ
        char    agekbn[1+1];            // 15 年齢区分
        char    agekbnflg[1+1];         // 16 年齢区分チェックフラグ
} sqlCHKZOK;

// <<   保留依頼情報      >>
struct {
        char    utkymd[10+1];           // 1 ＢＭＬ受付年月日
        char    irino[11+1];            // 2 依頼書Ｎｏ
        char    knsgrp[16+1];           // 3 検査グループ
        char    kmkcd[7+1];             // 4 項目コード
        char    hkkhrkbn[1+1];          // 5 報告管理区分
        char    hkkhrcmt[64+1];         // 6 報告管理コメント
        char    ksndh[26+1];            // 7 更新日時
        char    trkdh[26+1];            // 8 登録日時
} sqlHKHRIRAI;

sqlint32	rec_cnt ;
char		sel_knskisymd[10+1];

EXEC SQL END DECLARE SECTION;

/******************************************************************************/
/* 関数宣言                                                                   */
/******************************************************************************/

/******************************************************************************/
/*  関 数 名　：sFncSelSysKnr()							*/
/*  機能概要　：システム管理情報検索				  	 	*/
/*  入　　力　：                                                              */
/*　 第１引数 ：	システム管理情報検索結果格納構造体			*/
/*  出　　力　：                                                              */
/*  復帰情報　：int								*/
/******************************************************************************/
int
sFncSelSysKnr ( precSYSKNR )
my_stSYSKNR	*precSYSKNR ;
{
	EXEC SQL WHENEVER SQLERROR GO TO error;

	/*	カーソル定義 */
	EXEC SQL DECLARE c1 CURSOR FOR
	SELECT  
		kjnsriymd
		, iriendflg
		, bchendflg
		, unyflg
	FROM    sysknrmst
        FOR READ ONLY
        ;

	/*	検索 */
	EXEC SQL OPEN c1 ;

	memset ( &sqlSYSKNR, '\0', sizeof ( sqlSYSKNR ) ) ;
	EXEC SQL FETCH c1 INTO
			:sqlSYSKNR ;

	if ( SQLCODE == 100 ) {
		return ( -1 ) ;
	}

	memcpy ( precSYSKNR, &sqlSYSKNR, sizeof ( sqlSYSKNR ) ) ;

	EXEC SQL CLOSE c1;

	return ( 0 ) ;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	sFncPutLog ( TRCKIND_ERROR, __FILE__, "sFncSelSysKnr", __LINE__, EXEFLG_SEL, MYAPP_LOG_ERRCODE_NON,
				    "SQLCODE:%ld SQLSTATE:%5.5s", sqlca.sqlcode, sqlca.sqlstate ) ;
	//デッドロック
	return ( sqlca.sqlcode) ; 
}

/******************************************************************************/
/*  関 数 名　：sFncSelChkZok()							*/
/*  機能概要　：属性チェック情報検索				  	 	*/
/*  入　　力　：                                                              */
/*　 第１引数 ：	検査開始日						*/
/*　 第２引数 ：	属性チェック情報検索結果格納構造体			*/
/*　 第３引数 ：	検索データ件数						*/
/*  出　　力　：                                                              */
/*  復帰情報　：int								*/
/******************************************************************************/
int
sFncSelChkZok ( pSel_knskisymd, precCHKZOK, precCnt )
char		 *pSel_knskisymd ;
my_stCHKZOK	**precCHKZOK ;
int		 *precCnt ;
{
	int	 rec_cnt ;

	EXEC SQL WHENEVER SQLERROR GO TO error;

	/*	変数初期化	*/
	rec_cnt = *precCnt = 0;
	//	検索キー
	strcpy ( sel_knskisymd, pSel_knskisymd ) ;

	/*	カーソル定義 */
	EXEC SQL DECLARE c2 CURSOR FOR
	SELECT  
		iri.utkymd
		, iri.irino
		, iri.knsgrp
		, iri.kmkcd
		, kmk.kmknmj
		, kan.sstcd
		, kan.sstssnmj
		, kan.knjnmn
		, kan.krtno
		, kan.sc
		, chkzok.scflg
		, kan.tj
		, chkzok.tjflg
		, kan.tjtni
		, chkzok.tjtniflg
		, kan.sbtkbn
		, chkzok.sbtkbnflg
		, kan.age
		, chkzok.ageflg
		, kan.agekbn
		, chkzok.agekbnflg
	FROM    chkzokmst chkzok
		, irai iri
		, kanjya kan
		, kmkmst kmk
	WHERE   chkzok.knsgrp = iri.knsgrp
	    AND chkzok.kmkcd = iri.kmkcd
	    AND	kan.utkymd   = iri.utkymd
	    AND	kan.irino    = iri.irino
	    AND kmk.knsgrp = iri.knsgrp
	    AND kmk.kmkcd = iri.kmkcd
	    AND	iri.utkymd  >= :sel_knskisymd
	    AND	chkzok.kaiymd  <= :sel_knskisymd
	    AND	chkzok.haiymd  >= :sel_knskisymd
	    AND	kmk.kaiymd  <= :sel_knskisymd
	    AND	kmk.haiymd  >= :sel_knskisymd
        ORDER BY kan.sstcd, iri.utkymd, iri.irino, iri.kmkcd
        FOR READ ONLY
        ;

	/*	検索 */
	EXEC SQL OPEN c2 ;
	while( 1 ) {

		memset ( &sqlCHKZOK, '\0', sizeof ( sqlCHKZOK ) ) ;
		EXEC SQL FETCH c2 INTO
				:sqlCHKZOK ;

		if ( SQLCODE == 100 ) {
			break;
		}
		*precCHKZOK = ( my_stCHKZOK * ) realloc ( *precCHKZOK, sizeof ( my_stCHKZOK ) * ( rec_cnt + 1 ) ) ;
		if ( precCHKZOK == NULL ) {
			return ( -1 ) ;
		}
		memcpy ( &(*precCHKZOK)[rec_cnt], &sqlCHKZOK, sizeof ( sqlCHKZOK ) ) ;
		rec_cnt ++ ;
	}

	EXEC SQL CLOSE c2;

	*precCnt = rec_cnt ;

	return ( 0 ) ;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	sFncPutLog ( TRCKIND_ERROR, __FILE__, "sFncSelCHKZOK", __LINE__, EXEFLG_SEL, MYAPP_LOG_ERRCODE_NON,
				    "SQLCODE:%ld SQLSTATE:%5.5s WHERE[KNSKISYMD='%s']", sqlca.sqlcode, sqlca.sqlstate, pSel_knskisymd ) ;
	//デッドロック
	return ( sqlca.sqlcode) ; 
}

/******************************************************************************
 * InsHkHrIrai()
 *    HKHRIRAI レコードを挿入する
 * ■引数
 *    [I]  HrIrai* rec       挿入レコード
 * ■戻り値
 *    (int) HRC_SQL_NORMAL     正常終了
 *          HRC_NULL_POINTER   パラメータエラー
 *          HRC_INVALID_VALUE  設定値不正
 *          HRC_SQL_ERR        DBエラー
 ******************************************************************************/
int InsHkHrIrai( rec )
my_stCHKZOK	*rec ;
{
	if( !rec )
		return ( -3 ) ;

	strcpy ( sqlHKHRIRAI.utkymd, rec->utkymd ) ;
	strcpy ( sqlHKHRIRAI.irino, rec->irino ) ;
	strcpy ( sqlHKHRIRAI.knsgrp, rec->knsgrp ) ;
	strcpy ( sqlHKHRIRAI.kmkcd, rec->kmkcd ) ;
	if( strcmp(rec->scflg, MYAPP_ZOK_ERR ) == 0 ||
	    strcmp(rec->tjflg, MYAPP_ZOK_ERR ) == 0 ||
	    strcmp(rec->tjtniflg, MYAPP_ZOK_ERR ) == 0 ||
	    strcmp(rec->sbtkbnflg, MYAPP_ZOK_ERR ) == 0 ||
	    strcmp(rec->ageflg, MYAPP_ZOK_ERR ) == 0 ||
	    strcmp(rec->agekbnflg, MYAPP_ZOK_ERR ) == 0 ) {

		strcpy ( sqlHKHRIRAI.hkkhrkbn, "1" ) ;
	}
	else if( strcmp(rec->scflg, MYAPP_ZOK_NG ) == 0 ||
		 strcmp(rec->tjflg, MYAPP_ZOK_NG ) == 0 ||
		 strcmp(rec->tjtniflg, MYAPP_ZOK_NG ) == 0 ||
		 strcmp(rec->sbtkbnflg, MYAPP_ZOK_NG ) == 0 ||
		 strcmp(rec->ageflg, MYAPP_ZOK_NG ) == 0 ||
		 strcmp(rec->agekbnflg, MYAPP_ZOK_NG ) == 0 ) {

		strcpy ( sqlHKHRIRAI.hkkhrkbn, "2" ) ;
	}
	memset ( sqlHKHRIRAI.hkkhrcmt, '\0', sizeof ( sqlHKHRIRAI.hkkhrcmt ) ) ;

	EXEC SQL INSERT INTO HKHRIRAI
	(
		UTKYMD,
		IRINO,
		KNSGRP,
		KMKCD,
		HKKHRKBN,
		HKKHRCMT,
		KSNDH,
		TRKDH
	) VALUES (
		:sqlHKHRIRAI.utkymd,
		:sqlHKHRIRAI.irino,
		:sqlHKHRIRAI.knsgrp,
		:sqlHKHRIRAI.kmkcd,
		:sqlHKHRIRAI.hkkhrkbn,
		:sqlHKHRIRAI.hkkhrcmt,
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP
	);

	if ( sqlca.sqlcode == MYAPP_SQL_DUPLICATION ) {
		/* 重複エラーが発生した場合、UPDATEする */
		EXEC SQL UPDATE HKHRIRAI
		SET (
			HKKHRKBN,
			HKKHRCMT,
			KSNDH
		) = (
			:sqlHKHRIRAI.hkkhrkbn,
			:sqlHKHRIRAI.hkkhrcmt,
			CURRENT TIMESTAMP
		) WHERE
			UTKYMD = :sqlHKHRIRAI.utkymd
		    AND	IRINO = :sqlHKHRIRAI.irino
		    AND	KNSGRP = :sqlHKHRIRAI.knsgrp
		    AND	KMKCD = :sqlHKHRIRAI.kmkcd
		;
		if( sqlca.sqlcode < 0 ){
			EXEC SQL WHENEVER SQLERROR CONTINUE;
			sFncPutLog ( TRCKIND_ERROR, __FILE__, "InsHRIRAI", __LINE__, EXEFLG_SEL, MYAPP_LOG_ERRCODE_NON,
				     "SQLCODE:%ld SQLSTATE:%5.5s TBL[HRIRAI] UPDATE [utkymd:%s, irino:%s, knsgrp:%s, kmkcd:%s]",
				     sqlca.sqlcode, sqlca.sqlstate, sqlHKHRIRAI.utkymd, sqlHKHRIRAI.irino, sqlHKHRIRAI.knsgrp, sqlHKHRIRAI.kmkcd ) ;

			return ( sqlca.sqlcode) ;
		}
	}
	else if( sqlca.sqlcode < 0 ){
		EXEC SQL WHENEVER SQLERROR CONTINUE;
		sFncPutLog ( TRCKIND_ERROR, __FILE__, "InsHRIRAI", __LINE__, EXEFLG_SEL, MYAPP_LOG_ERRCODE_NON,
			     "SQLCODE:%ld SQLSTATE:%5.5s TBL[HRIRAI] INSERT [utkymd:%s, irino:%s, knsgrp:%s, kmkcd:%s]",
			     sqlca.sqlcode, sqlca.sqlstate, sqlHKHRIRAI.utkymd, sqlHKHRIRAI.irino, sqlHKHRIRAI.knsgrp, sqlHKHRIRAI.kmkcd ) ;

		return ( sqlca.sqlcode) ;
	}
	return ( 0 );
}

/** End of File *********************************************************/
