/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Bssikka.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-02-21                    Create
 **********************************************************************/
#include <stdio.h>

#include "Bssikka.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    utkymd[11];
	char    irino[12];
	char    iriketflg;
	short   bssino;
	short   gyono;
	char    bssidt[129];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Bssikka

BmlDMMInfo	BssikkaArray[] = {
	DMM_SDATE( utkymd ),
	DMM_SSTRING( irino ),
	DMM_SCHAR( iriketflg ),
	DMM_SSHORT( bssino ),
	DMM_SSHORT( gyono ),
	DMM_SSTRING( bssidt ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbBssikkaSelectAll()
 *    BSSIKKA レコード全件取得
 * ■引数
 *    [O]  Bssikka** arrayOut   取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbBssikkaSelectAll( Bssikka** arrayOut, int* numOut )
{
    Bssikka*    array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		UTKYMD,
		IRINO,
		IRIKETFLG,
		BSSINO,
		GYONO,
		BSSIDT,
		KSNDH
    FROM
        BSSIKKA FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Bssikka* rec;

        EXEC SQL FETCH c1 INTO
			:utkymd,
			:irino,
			:iriketflg,
			:bssino,
			:gyono,
			:bssidt,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Bssikka*)ZbmlRealloc( array,
                                    sizeof( Bssikka ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Bssikka ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, BssikkaArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbBssikkaSelectKey()
 *    BSSIKKA レコードKey条件取得
 * ■引数
 *    [I]  Bssikka* pKey       取得するレコードのキー
 *    [O]  Bssikka** arrayOut   取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbBssikkaSelectKey( Bssikka* pKey, Bssikka** arrayOut, int* numOut )
{
    Bssikka*    array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, BssikkaArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		UTKYMD,
		IRINO,
		IRIKETFLG,
		BSSINO,
		GYONO,
		BSSIDT,
		KSNDH
    FROM
        BSSIKKA
    WHERE
		UTKYMD = :utkymd AND
		IRINO = :irino AND
		BSSINO = :bssino AND
		GYONO = :gyono FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Bssikka* rec;

        EXEC SQL FETCH c2 INTO
			:utkymd,
			:irino,
			:iriketflg,
			:bssino,
			:gyono,
			:bssidt,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Bssikka*)ZbmlRealloc( array,
                                    sizeof( Bssikka ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Bssikka ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, BssikkaArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbBssikkaInsert()
 *    BSSIKKA レコードを挿入する
 * ■引数
 *    [I]  Bssikka* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbBssikkaInsert( Bssikka* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, BssikkaArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO BSSIKKA
    (
		UTKYMD,
		IRINO,
		IRIKETFLG,
		BSSINO,
		GYONO,
		BSSIDT,
		KSNDH
    ) VALUES (
		:utkymd,
		:irino,
		:iriketflg,
		:bssino,
		:gyono,
		:bssidt,
		:ksndh
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbBssikkaUpdate()
 *    BSSIKKA レコードを更新する
 * ■引数
 *    [I]  Bssikka* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbBssikkaUpdate( Bssikka* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, BssikkaArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE BSSIKKA
    SET (
		IRIKETFLG,
		BSSIDT,
		KSNDH
    ) = (
		:iriketflg,
		:bssidt,
		:ksndh
    ) WHERE
		UTKYMD = :utkymd AND
		IRINO = :irino AND
		BSSINO = :bssino AND
		GYONO = :gyono;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbBssikkaDelete()
 *    BSSIKKA レコードを削除する
 * ■引数
 *    [I]  Bssikka* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbBssikkaDelete( Bssikka* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, BssikkaArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM BSSIKKA
    WHERE
		UTKYMD = :utkymd AND
		IRINO = :irino AND
		BSSINO = :bssino AND
		GYONO = :gyono;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
