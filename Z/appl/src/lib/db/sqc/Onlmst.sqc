/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Onlmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "Onlmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	short   oncode;
	char    kbn[11];
	char    bskkbn[5];
	char    bsklne[5];
	char    bskgok[7];
	short   protocol;
	char    wsname[17];
	short   opentype;
	sqlint32  portno;
	char    onpath[129];
	short   approtocol;
	sqlint32  errorlevel;
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Onlmst

BmlDMMInfo	OnlmstArray[] = {
	DMM_SSHORT( oncode ),
	DMM_SSTRING( kbn ),
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( bsklne ),
	DMM_SSTRING( bskgok ),
	DMM_SSHORT( protocol ),
	DMM_SSTRING( wsname ),
	DMM_SSHORT( opentype ),
	DMM_SLONG( portno ),
	DMM_SSTRING( onpath ),
	DMM_SSHORT( approtocol ),
	DMM_SLONG( errorlevel ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbOnlmstSelectAll()
 *    ONLMST レコード全件取得
 * ■引数
 *    [O]  Onlmst** arrayOut    取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbOnlmstSelectAll( Onlmst** arrayOut, int* numOut )
{
    Onlmst*     array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		ONCODE,
		KBN,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		PROTOCOL,
		WSNAME,
		OPENTYPE,
		PORTNO,
		ONPATH,
		APPROTOCOL,
		ERRORLEVEL,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        ONLMST FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Onlmst* rec;

        EXEC SQL FETCH c1 INTO
			:oncode,
			:kbn,
			:bskkbn,
			:bsklne,
			:bskgok,
			:protocol,
			:wsname,
			:opentype,
			:portno,
			:onpath,
			:approtocol,
			:errorlevel,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Onlmst*)ZbmlRealloc( array,
                                    sizeof( Onlmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Onlmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, OnlmstArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbOnlmstSelectKey()
 *    ONLMST レコードKey条件取得
 * ■引数
 *    [I]  Onlmst* pKey       取得するレコードのキー
 *    [O]  Onlmst** arrayOut    取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbOnlmstSelectKey( Onlmst* pKey, Onlmst** arrayOut, int* numOut )
{
    Onlmst*     array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, OnlmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		ONCODE,
		KBN,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		PROTOCOL,
		WSNAME,
		OPENTYPE,
		PORTNO,
		ONPATH,
		APPROTOCOL,
		ERRORLEVEL,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        ONLMST
    WHERE
		ONCODE = :oncode AND
		KAIYMD <= :kaiymd FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Onlmst* rec;

        EXEC SQL FETCH c2 INTO
			:oncode,
			:kbn,
			:bskkbn,
			:bsklne,
			:bskgok,
			:protocol,
			:wsname,
			:opentype,
			:portno,
			:onpath,
			:approtocol,
			:errorlevel,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Onlmst*)ZbmlRealloc( array,
                                    sizeof( Onlmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Onlmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, OnlmstArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbOnlmstInsert()
 *    ONLMST レコードを挿入する
 * ■引数
 *    [I]  Onlmst* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbOnlmstInsert( Onlmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, OnlmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO ONLMST
    (
		ONCODE,
		KBN,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		PROTOCOL,
		WSNAME,
		OPENTYPE,
		PORTNO,
		ONPATH,
		APPROTOCOL,
		ERRORLEVEL,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) VALUES (
		:oncode,
		:kbn,
		:bskkbn,
		:bsklne,
		:bskgok,
		:protocol,
		:wsname,
		:opentype,
		:portno,
		:onpath,
		:approtocol,
		:errorlevel,
		:kaiymd,
		:haiymd,
		:hnktntid,
		:ksndh
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbOnlmstUpdate()
 *    ONLMST レコードを更新する
 * ■引数
 *    [I]  Onlmst* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbOnlmstUpdate( Onlmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, OnlmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE ONLMST
    SET (
		KBN,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		PROTOCOL,
		WSNAME,
		OPENTYPE,
		PORTNO,
		ONPATH,
		APPROTOCOL,
		ERRORLEVEL,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) = (
		:kbn,
		:bskkbn,
		:bsklne,
		:bskgok,
		:protocol,
		:wsname,
		:opentype,
		:portno,
		:onpath,
		:approtocol,
		:errorlevel,
		:haiymd,
		:hnktntid,
		:ksndh
    ) WHERE
		ONCODE = :oncode AND
		KAIYMD = :kaiymd;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbOnlmstDelete()
 *    ONLMST レコードを削除する
 * ■引数
 *    [I]  Onlmst* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbOnlmstDelete( Onlmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, OnlmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM ONLMST
    WHERE
		ONCODE = :oncode AND
		KAIYMD = :kaiymd;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
