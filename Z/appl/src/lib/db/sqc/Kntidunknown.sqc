/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Kntidunknown.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-02-21                    Create
 **********************************************************************/
#include <stdio.h>

#include "Kntidunknown.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    knskisymd[11];
	char    bskkbn[11];
	char    bsklne[11];
	char    bskgok[6];
	char    bskmjno[6];
	sqlint32  bskseq;
	sqlint32  nbkmkcd;
	char    knshu[41];
	char    bskerrsts[3];
	char    rawdata[31];
	char    sktdh[27];
	sqlint32  ctrlno;
	char    ksbr[9];
	char    nbdolbl[9];
	char    nbdoerr[4];
	char    ykdolbl[9];
	char    ykdoerr[4];
	char    etclbl[9];
	char    etcerr[4];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Kntidunknown

BmlDMMInfo	KntidunknownArray[] = {
	DMM_SDATE( knskisymd ),
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( bsklne ),
	DMM_SSTRING( bskgok ),
	DMM_SSTRING( bskmjno ),
	DMM_SLONG( bskseq ),
	DMM_SLONG( nbkmkcd ),
	DMM_SSTRING( knshu ),
	DMM_SSTRING( bskerrsts ),
	DMM_SSTRING( rawdata ),
	DMM_STIMESTAMP( sktdh ),
	DMM_SLONG( ctrlno ),
	DMM_SSTRING( ksbr ),
	DMM_SSTRING( nbdolbl ),
	DMM_SSTRING( nbdoerr ),
	DMM_SSTRING( ykdolbl ),
	DMM_SSTRING( ykdoerr ),
	DMM_SSTRING( etclbl ),
	DMM_SSTRING( etcerr ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbKntidunknownSelectAll()
 *    KNTIDUNKNOWN レコード全件取得
 * ■引数
 *    [O]  Kntidunknown** array 取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKntidunknownSelectAll( Kntidunknown** arrayOut, int* numOut )
{
    Kntidunknown* array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		KNSKISYMD,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		BSKMJNO,
		BSKSEQ,
		NBKMKCD,
		KNSHU,
		BSKERRSTS,
		RAWDATA,
		SKTDH,
		CTRLNO,
		KSBR,
		NBDOLBL,
		NBDOERR,
		YKDOLBL,
		YKDOERR,
		ETCLBL,
		ETCERR,
		KSNDH
    FROM
        KNTIDUNKNOWN FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Kntidunknown* rec;

        EXEC SQL FETCH c1 INTO
			:knskisymd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:bskmjno,
			:bskseq,
			:nbkmkcd,
			:knshu,
			:bskerrsts,
			:rawdata,
			:sktdh,
			:ctrlno,
			:ksbr,
			:nbdolbl,
			:nbdoerr,
			:ykdolbl,
			:ykdoerr,
			:etclbl,
			:etcerr,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Kntidunknown*)ZbmlRealloc( array,
                                    sizeof( Kntidunknown ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Kntidunknown ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KntidunknownArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbKntidunknownSelectKey()
 *    KNTIDUNKNOWN レコードKey条件取得
 * ■引数
 *    [I]  Kntidunknown* pKey   取得するレコードのキー
 *    [O]  Kntidunknown** array 取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKntidunknownSelectKey( Kntidunknown* pKey, Kntidunknown** arrayOut, int* numOut )
{
    Kntidunknown* array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, KntidunknownArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		KNSKISYMD,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		BSKMJNO,
		BSKSEQ,
		NBKMKCD,
		KNSHU,
		BSKERRSTS,
		RAWDATA,
		SKTDH,
		CTRLNO,
		KSBR,
		NBDOLBL,
		NBDOERR,
		YKDOLBL,
		YKDOERR,
		ETCLBL,
		ETCERR,
		KSNDH
    FROM
        KNTIDUNKNOWN
    WHERE
		KNSKISYMD = :knskisymd AND
		BSKKBN = :bskkbn AND
		BSKLNE = :bsklne AND
		BSKGOK = :bskgok AND
		BSKMJNO = :bskmjno AND
		BSKSEQ = :bskseq AND
		NBKMKCD = :nbkmkcd FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Kntidunknown* rec;

        EXEC SQL FETCH c2 INTO
			:knskisymd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:bskmjno,
			:bskseq,
			:nbkmkcd,
			:knshu,
			:bskerrsts,
			:rawdata,
			:sktdh,
			:ctrlno,
			:ksbr,
			:nbdolbl,
			:nbdoerr,
			:ykdolbl,
			:ykdoerr,
			:etclbl,
			:etcerr,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Kntidunknown*)ZbmlRealloc( array,
                                    sizeof( Kntidunknown ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Kntidunknown ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KntidunknownArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKntidunknownInsert()
 *    KNTIDUNKNOWN レコードを挿入する
 * ■引数
 *    [I]  Kntidunknown* rec    挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKntidunknownInsert( Kntidunknown* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KntidunknownArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO KNTIDUNKNOWN
    (
		KNSKISYMD,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		BSKMJNO,
		BSKSEQ,
		NBKMKCD,
		KNSHU,
		BSKERRSTS,
		RAWDATA,
		SKTDH,
		CTRLNO,
		KSBR,
		NBDOLBL,
		NBDOERR,
		YKDOLBL,
		YKDOERR,
		ETCLBL,
		ETCERR,
		KSNDH
    ) VALUES (
		:knskisymd,
		:bskkbn,
		:bsklne,
		:bskgok,
		:bskmjno,
		:bskseq,
		:nbkmkcd,
		:knshu,
		:bskerrsts,
		:rawdata,
		:sktdh,
		:ctrlno,
		:ksbr,
		:nbdolbl,
		:nbdoerr,
		:ykdolbl,
		:ykdoerr,
		:etclbl,
		:etcerr,
		:ksndh
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKntidunknownUpdate()
 *    KNTIDUNKNOWN レコードを更新する
 * ■引数
 *    [I]  Kntidunknown* rec    更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKntidunknownUpdate( Kntidunknown* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KntidunknownArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE KNTIDUNKNOWN
    SET (
		KNSHU,
		BSKERRSTS,
		RAWDATA,
		SKTDH,
		CTRLNO,
		KSBR,
		NBDOLBL,
		NBDOERR,
		YKDOLBL,
		YKDOERR,
		ETCLBL,
		ETCERR,
		KSNDH
    ) = (
		:knshu,
		:bskerrsts,
		:rawdata,
		:sktdh,
		:ctrlno,
		:ksbr,
		:nbdolbl,
		:nbdoerr,
		:ykdolbl,
		:ykdoerr,
		:etclbl,
		:etcerr,
		:ksndh
    ) WHERE
		KNSKISYMD = :knskisymd AND
		BSKKBN = :bskkbn AND
		BSKLNE = :bsklne AND
		BSKGOK = :bskgok AND
		BSKMJNO = :bskmjno AND
		BSKSEQ = :bskseq AND
		NBKMKCD = :nbkmkcd;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKntidunknownDelete()
 *    KNTIDUNKNOWN レコードを削除する
 * ■引数
 *    [I]  Kntidunknown* rec    削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKntidunknownDelete( Kntidunknown* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KntidunknownArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM KNTIDUNKNOWN
    WHERE
		KNSKISYMD = :knskisymd AND
		BSKKBN = :bskkbn AND
		BSKLNE = :bsklne AND
		BSKGOK = :bskgok AND
		BSKMJNO = :bskmjno AND
		BSKSEQ = :bskseq AND
		NBKMKCD = :nbkmkcd;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
