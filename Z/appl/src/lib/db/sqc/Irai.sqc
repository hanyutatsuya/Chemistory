/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Irai.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-02-21                    Create
 **********************************************************************/
#include <stdio.h>

#include "Irai.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    utkymd[11];
	char    irino[12];
	char    iriketflg;
	short   zssdino;
	char    knsgrp[17];
	char    kmkcd[8];
	char    irihsmkbn;
	char    irikbn;
	char    ksktkbn;
	char    sriymd[11];
	char    kntno[14];
	char    kntketflg;
	char    chkmj[5];
	char    stsrcd[5];
	char    kmkrs[17];
	char    oyakmkcd[8];
	char    smpcd[8];
	char    setkmkcd[8];
	char    srinycd;
	char    seccd[3];
	char    skchkflg;
	char    bkfkkbn;
	char    ysnlbl[3];
	char    skflg;
	char    tkflg;
	char    sjflg;
	char    jktkflg;
	char    kjno[4];
	char    fkhkknohjkbn;
	char    tbkjno[4];
	char    tbkjflg;
	char    htkfkhms[25];
	char    tskflg[3];
	char    tktflg[3];
	char    bnckbn;
	char    nbnckbn;
	char    knskisyymd[11];
	char    knskryymd[11];
	char    knskrytme[9];
	char    kkhkkflg;
	char    kkiriflg;
	short   kkirilotno;
	char    kktoutkid[5];
	short   knssu;
	char    odrssflg;
	char    ytiksbr[16];
	char    hhkjkflg;
	char    ksndh[27];
	char	trkdh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Irai

BmlDMMInfo	IraiArray[] = {
	DMM_SDATE( utkymd ),
	DMM_SSTRING( irino ),
	DMM_SCHAR( iriketflg ),
	DMM_SSHORT( zssdino ),
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SCHAR( irihsmkbn ),
	DMM_SCHAR( irikbn ),
	DMM_SCHAR( ksktkbn ),
	DMM_SDATE( sriymd ),
	DMM_SSTRING( kntno ),
	DMM_SCHAR( kntketflg ),
	DMM_SSTRING( chkmj ),
	DMM_SSTRING( stsrcd ),
	DMM_SSTRING( kmkrs ),
	DMM_SSTRING( oyakmkcd ),
	DMM_SSTRING( smpcd ),
	DMM_SSTRING( setkmkcd ),
	DMM_SCHAR( srinycd ),
	DMM_SSTRING( seccd ),
	DMM_SCHAR( skchkflg ),
	DMM_SCHAR( bkfkkbn ),
	DMM_SSTRING( ysnlbl ),
	DMM_SCHAR( skflg ),
	DMM_SCHAR( tkflg ),
	DMM_SCHAR( sjflg ),
	DMM_SCHAR( jktkflg ),
	DMM_SSTRING( kjno ),
	DMM_SCHAR( fkhkknohjkbn ),
	DMM_SSTRING( tbkjno ),
	DMM_SCHAR( tbkjflg ),
	DMM_SSTRING( htkfkhms ),
	DMM_SSTRING( tskflg ),
	DMM_SSTRING( tktflg ),
	DMM_SCHAR( bnckbn ),
	DMM_SCHAR( nbnckbn ),
	DMM_SDATE( knskisyymd ),
	DMM_SDATE( knskryymd ),
	DMM_STIME( knskrytme ),
	DMM_SCHAR( kkhkkflg ),
	DMM_SCHAR( kkiriflg ),
	DMM_SSHORT( kkirilotno ),
	DMM_SSTRING( kktoutkid ),
	DMM_SSHORT( knssu ),
	DMM_SCHAR( odrssflg ),
	DMM_SSTRING( ytiksbr ),
	DMM_SCHAR( hhkjkflg ),
	DMM_STIMESTAMP( ksndh ),
	DMM_STIMESTAMP( trkdh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbIraiSelectAll()
 *    IRAI レコード全件取得
 * ■引数
 *    [O]  Irai** arrayOut      取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbIraiSelectAll( Irai** arrayOut, int* numOut )
{
    Irai*       array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		UTKYMD,
		IRINO,
		IRIKETFLG,
		ZSSDINO,
		KNSGRP,
		KMKCD,
		IRIHSMKBN,
		IRIKBN,
		KSKTKBN,
		SRIYMD,
		KNTNO,
		KNTKETFLG,
		CHKMJ,
		STSRCD,
		KMKRS,
		OYAKMKCD,
		SMPCD,
		SETKMKCD,
		SRINYCD,
		SECCD,
		SKCHKFLG,
		BKFKKBN,
		YSNLBL,
		SKFLG,
		TKFLG,
		SJFLG,
		JKTKFLG,
		KJNO,
		FKHKKNOHJKBN,
		TBKJNO,
		TBKJFLG,
		HTKFKHMS,
		TSKFLG,
		TKTFLG,
		BNCKBN,
		NBNCKBN,
		KNSKISYYMD,
		KNSKRYYMD,
		KNSKRYTME,
		KKHKKFLG,
		KKIRIFLG,
		KKIRILOTNO,
		KKTOUTKID,
		KNSSU,
		ODRSSFLG,
		YTIKSBR,
		HHKJKFLG,
		KSNDH,
		TRKDH
    FROM
        IRAI FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Irai* rec;

        EXEC SQL FETCH c1 INTO
			:utkymd,
			:irino,
			:iriketflg,
			:zssdino,
			:knsgrp,
			:kmkcd,
			:irihsmkbn,
			:irikbn,
			:ksktkbn,
			:sriymd,
			:kntno,
			:kntketflg,
			:chkmj,
			:stsrcd,
			:kmkrs,
			:oyakmkcd,
			:smpcd,
			:setkmkcd,
			:srinycd,
			:seccd,
			:skchkflg,
			:bkfkkbn,
			:ysnlbl,
			:skflg,
			:tkflg,
			:sjflg,
			:jktkflg,
			:kjno,
			:fkhkknohjkbn,
			:tbkjno,
			:tbkjflg,
			:htkfkhms,
			:tskflg,
			:tktflg,
			:bnckbn,
			:nbnckbn,
			:knskisyymd,
			:knskryymd,
			:knskrytme,
			:kkhkkflg,
			:kkiriflg,
			:kkirilotno,
			:kktoutkid,
			:knssu,
			:odrssflg,
			:ytiksbr,
			:hhkjkflg,
			:ksndh,
			:trkdh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Irai*)ZbmlRealloc( array,
                                    sizeof( Irai ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Irai ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, IraiArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbIraiSelectKey()
 *    IRAI レコードKey条件取得
 * ■引数
 *    [I]  Irai* pKey       取得するレコードのキー
 *    [O]  Irai** arrayOut      取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbIraiSelectKey( Irai* pKey, Irai** arrayOut, int* numOut )
{
    Irai*       array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, IraiArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		UTKYMD,
		IRINO,
		IRIKETFLG,
		ZSSDINO,
		KNSGRP,
		KMKCD,
		IRIHSMKBN,
		IRIKBN,
		KSKTKBN,
		SRIYMD,
		KNTNO,
		KNTKETFLG,
		CHKMJ,
		STSRCD,
		KMKRS,
		OYAKMKCD,
		SMPCD,
		SETKMKCD,
		SRINYCD,
		SECCD,
		SKCHKFLG,
		BKFKKBN,
		YSNLBL,
		SKFLG,
		TKFLG,
		SJFLG,
		JKTKFLG,
		KJNO,
		FKHKKNOHJKBN,
		TBKJNO,
		TBKJFLG,
		HTKFKHMS,
		TSKFLG,
		TKTFLG,
		BNCKBN,
		NBNCKBN,
		KNSKISYYMD,
		KNSKRYYMD,
		KNSKRYTME,
		KKHKKFLG,
		KKIRIFLG,
		KKIRILOTNO,
		KKTOUTKID,
		KNSSU,
		ODRSSFLG,
		YTIKSBR,
		HHKJKFLG,
		KSNDH,
		TRKDH
    FROM
        IRAI
    WHERE
		UTKYMD = :utkymd AND
		IRINO = :irino AND
		ZSSDINO = :zssdino AND
		KNSGRP         = :knsgrp         AND
		KMKCD = :kmkcd FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Irai* rec;

        EXEC SQL FETCH c2 INTO
			:utkymd,
			:irino,
			:iriketflg,
			:zssdino,
			:knsgrp,
			:kmkcd,
			:irihsmkbn,
			:irikbn,
			:ksktkbn,
			:sriymd,
			:kntno,
			:kntketflg,
			:chkmj,
			:stsrcd,
			:kmkrs,
			:oyakmkcd,
			:smpcd,
			:setkmkcd,
			:srinycd,
			:seccd,
			:skchkflg,
			:bkfkkbn,
			:ysnlbl,
			:skflg,
			:tkflg,
			:sjflg,
			:jktkflg,
			:kjno,
			:fkhkknohjkbn,
			:tbkjno,
			:tbkjflg,
			:htkfkhms,
			:tskflg,
			:tktflg,
			:bnckbn,
			:nbnckbn,
			:knskisyymd,
			:knskryymd,
			:knskrytme,
			:kkhkkflg,
			:kkiriflg,
			:kkirilotno,
			:kktoutkid,
			:knssu,
			:odrssflg,
			:ytiksbr,
			:hhkjkflg,
			:ksndh,
			:trkdh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Irai*)ZbmlRealloc( array,
                                    sizeof( Irai ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Irai ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, IraiArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbIraiInsert()
 *    IRAI レコードを挿入する
 * ■引数
 *    [I]  Irai* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbIraiInsert( Irai* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, IraiArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO IRAI
    (
		UTKYMD,
		IRINO,
		IRIKETFLG,
		ZSSDINO,
		KNSGRP,
		KMKCD,
		IRIHSMKBN,
		IRIKBN,
		KSKTKBN,
		SRIYMD,
		KNTNO,
		KNTKETFLG,
		CHKMJ,
		STSRCD,
		KMKRS,
		OYAKMKCD,
		SMPCD,
		SETKMKCD,
		SRINYCD,
		SECCD,
		SKCHKFLG,
		BKFKKBN,
		YSNLBL,
		SKFLG,
		TKFLG,
		SJFLG,
		JKTKFLG,
		KJNO,
		FKHKKNOHJKBN,
		TBKJNO,
		TBKJFLG,
		HTKFKHMS,
		TSKFLG,
		TKTFLG,
		BNCKBN,
		NBNCKBN,
		KNSKISYYMD,
		KNSKRYYMD,
		KNSKRYTME,
		KKHKKFLG,
		KKIRIFLG,
		KKIRILOTNO,
		KKTOUTKID,
		KNSSU,
		ODRSSFLG,
		YTIKSBR,
		HHKJKFLG,
		KSNDH,
		TRKDH
    ) VALUES (
		:utkymd,
		:irino,
		:iriketflg,
		:zssdino,
		:knsgrp,
		:kmkcd,
		:irihsmkbn,
		:irikbn,
		:ksktkbn,
		:sriymd,
		:kntno,
		:kntketflg,
		:chkmj,
		:stsrcd,
		:kmkrs,
		:oyakmkcd,
		:smpcd,
		:setkmkcd,
		:srinycd,
		:seccd,
		:skchkflg,
		:bkfkkbn,
		:ysnlbl,
		:skflg,
		:tkflg,
		:sjflg,
		:jktkflg,
		:kjno,
		:fkhkknohjkbn,
		:tbkjno,
		:tbkjflg,
		:htkfkhms,
		:tskflg,
		:tktflg,
		:bnckbn,
		:nbnckbn,
		:knskisyymd,
		:knskryymd,
		:knskrytme,
		:kkhkkflg,
		:kkiriflg,
		:kkirilotno,
		:kktoutkid,
		:knssu,
		:odrssflg,
		:ytiksbr,
		:hhkjkflg,
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbIraiUpdate()
 *    IRAI レコードを更新する
 * ■引数
 *    [I]  Irai* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbIraiUpdate( Irai* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, IraiArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE IRAI
    SET (
		IRIKETFLG,
		IRIHSMKBN,
		IRIKBN,
		KSKTKBN,
		SRIYMD,
		KNTNO,
		KNTKETFLG,
		CHKMJ,
		STSRCD,
		KMKRS,
		OYAKMKCD,
		SMPCD,
		SETKMKCD,
		SRINYCD,
		SECCD,
		SKCHKFLG,
		BKFKKBN,
		YSNLBL,
		SKFLG,
		TKFLG,
		SJFLG,
		JKTKFLG,
		KJNO,
		FKHKKNOHJKBN,
		TBKJNO,
		TBKJFLG,
		HTKFKHMS,
		TSKFLG,
		TKTFLG,
		BNCKBN,
		NBNCKBN,
		KNSKISYYMD,
		KNSKRYYMD,
		KNSKRYTME,
		KKHKKFLG,
		KKIRIFLG,
		KKIRILOTNO,
		KKTOUTKID,
		KNSSU,
		ODRSSFLG,
		YTIKSBR,
		HHKJKFLG,
		KSNDH,
		TRKDH
    ) = (
		:iriketflg,
		:irihsmkbn,
		:irikbn,
		:ksktkbn,
		:sriymd,
		:kntno,
		:kntketflg,
		:chkmj,
		:stsrcd,
		:kmkrs,
		:oyakmkcd,
		:smpcd,
		:setkmkcd,
		:srinycd,
		:seccd,
		:skchkflg,
		:bkfkkbn,
		:ysnlbl,
		:skflg,
		:tkflg,
		:sjflg,
		:jktkflg,
		:kjno,
		:fkhkknohjkbn,
		:tbkjno,
		:tbkjflg,
		:htkfkhms,
		:tskflg,
		:tktflg,
		:bnckbn,
		:nbnckbn,
		:knskisyymd,
		:knskryymd,
		:knskrytme,
		:kkhkkflg,
		:kkiriflg,
		:kkirilotno,
		:kktoutkid,
		:knssu,
		:odrssflg,
		:ytiksbr,
		:hhkjkflg,
		CURRENT TIMESTAMP,
		:trkdh
    ) WHERE
		UTKYMD = :utkymd AND
		IRINO = :irino AND
		ZSSDINO = :zssdino AND
		KNSGRP         = :knsgrp         AND
		KMKCD = :kmkcd;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
// UPD 2006-08-21 S.Ueda >>
long ZdbIraiUpdateSaiken( Irai* rec, short aKnssu )
{
EXEC SQL BEGIN DECLARE SECTION;
	short	hKnssu;	// 検査回数
EXEC SQL END DECLARE SECTION;

	// 検査回数をホスト変数へセット
	hKnssu = aKnssu;
//long ZdbIraiUpdateSaiken( Irai* rec )
//{
// UPD 2006-08-21 S.Ueda <<
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, IraiArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

// UPD 2006-08-21 S.Ueda >>
    EXEC SQL UPDATE IRAI
    SET 	KSKTKBN = 'K',
		ODRSSFLG = '1' ,
		KNSSU = KNSSU + :hKnssu,
		KSNDH = CURRENT TIMESTAMP
    WHERE
		IRINO = :irino AND
		KNSGRP = :knsgrp AND
		KMKCD = :kmkcd AND
		ZSSDINO = :zssdino AND
		UTKYMD = :utkymd;
//    EXEC SQL UPDATE IRAI
//   SET 	KSKTKBN = 'K',
//		ODRSSFLG = '1' ,
//		KNSSU = KNSSU + 1,
//		KSNDH = CURRENT TIMESTAMP
//   WHERE
//		IRINO = :irino AND
//		KNSGRP = :knsgrp AND
//		KMKCD = :kmkcd AND
//		ZSSDINO = :zssdino AND
//		UTKYMD = :utkymd;
// UPD 2006-08-21 S.Ueda <<

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbIraiDelete()
 *    IRAI レコードを削除する
 * ■引数
 *    [I]  Irai* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbIraiDelete( Irai* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, IraiArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM IRAI
    WHERE
		UTKYMD = :utkymd AND
		IRINO = :irino AND
		ZSSDINO = :zssdino AND
		KNSGRP         = :knsgrp         AND
		KMKCD = :kmkcd;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
