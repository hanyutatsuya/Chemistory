/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Xbarm.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-02-21                    Create
 **********************************************************************/
#include <stdio.h>

#include "Xbarm.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    knskisymd[11];
	char    bskkbn[5];
	char    bsklne[5];
	char    bskgok[7];
	char    knsgrp[17];
	char    kmkcd[8];
	char    nbkmkcd[8];
	sqlint32  pltno;
	sqlint32  knsseqst;
	sqlint32  knsseqed;
	sqlint32  bskseqst;
	sqlint32  bskseqed;
	short   pltseqst;
	short   pltseqed;
	short   pltsu;
	char    xbarmkka[25];
	char    xbarmjtkbn;
	char    xbarmjkflg;
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Xbarm

BmlDMMInfo	XbarmArray[] = {
	DMM_SDATE( knskisymd ),
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( bsklne ),
	DMM_SSTRING( bskgok ),
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SSTRING( nbkmkcd ),
	DMM_SLONG( pltno ),
	DMM_SLONG( knsseqst ),
	DMM_SLONG( knsseqed ),
	DMM_SLONG( bskseqst ),
	DMM_SLONG( bskseqed ),
	DMM_SSHORT( pltseqst ),
	DMM_SSHORT( pltseqed ),
	DMM_SSHORT( pltsu ),
	DMM_SSTRING( xbarmkka ),
	DMM_SCHAR( xbarmjtkbn ),
	DMM_SCHAR( xbarmjkflg ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbXbarmSelectAll()
 *    XBARM レコード全件取得
 * ■引数
 *    [O]  Xbarm** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbXbarmSelectAll( Xbarm** arrayOut, int* numOut )
{
    Xbarm*      array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		KNSKISYMD,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		KNSGRP,
		KMKCD,
		NBKMKCD,
		PLTNO,
		KNSSEQST,
		KNSSEQED,
		BSKSEQST,
		BSKSEQED,
		PLTSEQST,
		PLTSEQED,
		PLTSU,
		XBARMKKA,
		XBARMJTKBN,
		XBARMJKFLG,
		KSNDH
    FROM
        XBARM FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Xbarm* rec;

        EXEC SQL FETCH c1 INTO
			:knskisymd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:knsgrp,
			:kmkcd,
			:nbkmkcd,
			:pltno,
			:knsseqst,
			:knsseqed,
			:bskseqst,
			:bskseqed,
			:pltseqst,
			:pltseqed,
			:pltsu,
			:xbarmkka,
			:xbarmjtkbn,
			:xbarmjkflg,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Xbarm*)ZbmlRealloc( array,
                                    sizeof( Xbarm ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Xbarm ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, XbarmArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbXbarmSelectKey()
 *    XBARM レコードKey条件取得
 * ■引数
 *    [I]  Xbarm* pKey       取得するレコードのキー
 *    [O]  Xbarm** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbXbarmSelectKey( Xbarm* pKey, Xbarm** arrayOut, int* numOut )
{
    Xbarm*      array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, XbarmArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		KNSKISYMD,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		KNSGRP,
		KMKCD,
		NBKMKCD,
		PLTNO,
		KNSSEQST,
		KNSSEQED,
		BSKSEQST,
		BSKSEQED,
		PLTSEQST,
		PLTSEQED,
		PLTSU,
		XBARMKKA,
		XBARMJTKBN,
		XBARMJKFLG,
		KSNDH
    FROM
        XBARM
    WHERE
		KNSKISYMD = :knskisymd AND
		BSKKBN = :bskkbn AND
		BSKGOK = :bskgok AND
		KMKCD = :kmkcd AND
		PLTNO = :pltno FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Xbarm* rec;

        EXEC SQL FETCH c2 INTO
			:knskisymd,
			:bskkbn,
			:bsklne,
			:bskgok,
			:knsgrp,
			:kmkcd,
			:nbkmkcd,
			:pltno,
			:knsseqst,
			:knsseqed,
			:bskseqst,
			:bskseqed,
			:pltseqst,
			:pltseqed,
			:pltsu,
			:xbarmkka,
			:xbarmjtkbn,
			:xbarmjkflg,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Xbarm*)ZbmlRealloc( array,
                                    sizeof( Xbarm ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Xbarm ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, XbarmArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbXbarmInsert()
 *    XBARM レコードを挿入する
 * ■引数
 *    [I]  Xbarm* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbXbarmInsert( Xbarm* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, XbarmArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO XBARM
    (
		KNSKISYMD,
		BSKKBN,
		BSKLNE,
		BSKGOK,
		KNSGRP,
		KMKCD,
		NBKMKCD,
		PLTNO,
		KNSSEQST,
		KNSSEQED,
		BSKSEQST,
		BSKSEQED,
		PLTSEQST,
		PLTSEQED,
		PLTSU,
		XBARMKKA,
		XBARMJTKBN,
		XBARMJKFLG,
		KSNDH
    ) VALUES (
		:knskisymd,
		:bskkbn,
		:bsklne,
		:bskgok,
		:knsgrp,
		:kmkcd,
		:nbkmkcd,
		:pltno,
		:knsseqst,
		:knsseqed,
		:bskseqst,
		:bskseqed,
		:pltseqst,
		:pltseqed,
		:pltsu,
		:xbarmkka,
		:xbarmjtkbn,
		:xbarmjkflg,
		:ksndh
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbXbarmUpdate()
 *    XBARM レコードを更新する
 * ■引数
 *    [I]  Xbarm* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbXbarmUpdate( Xbarm* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, XbarmArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE XBARM
    SET (
		BSKLNE,
		KNSGRP,
		NBKMKCD,
		KNSSEQST,
		KNSSEQED,
		BSKSEQST,
		BSKSEQED,
		PLTSEQST,
		PLTSEQED,
		PLTSU,
		XBARMKKA,
		XBARMJTKBN,
		XBARMJKFLG,
		KSNDH
    ) = (
		:bsklne,
		:knsgrp,
		:nbkmkcd,
		:knsseqst,
		:knsseqed,
		:bskseqst,
		:bskseqed,
		:pltseqst,
		:pltseqed,
		:pltsu,
		:xbarmkka,
		:xbarmjtkbn,
		:xbarmjkflg,
		:ksndh
    ) WHERE
		KNSKISYMD = :knskisymd AND
		BSKKBN = :bskkbn AND
		BSKGOK = :bskgok AND
		KMKCD = :kmkcd AND
		PLTNO = :pltno;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbXbarmDelete()
 *    XBARM レコードを削除する
 * ■引数
 *    [I]  Xbarm* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbXbarmDelete( Xbarm* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, XbarmArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM XBARM
    WHERE
		KNSKISYMD = :knskisymd AND
		BSKKBN = :bskkbn AND
		BSKGOK = :bskgok AND
		KMKCD = :kmkcd AND
		PLTNO = :pltno;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
