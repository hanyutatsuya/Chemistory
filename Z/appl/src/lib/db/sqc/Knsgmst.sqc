/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Knsgmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "Knsgmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    knsgrp[17];
	char    knsgrpnm[41];
	char    knsgrprs[21];
	char    seccd[3];
	char    knshokbn[41];
	char    knssbt;
	char    bgroup;
	char    unyokbn;
	short   seqkthsok;
	short   seqkthsng;
	char    wsssksok;
	char    wsssksng;
	short   minryo;
	short   maxryo;
	char    skitray[11];
	char    mbttray[11];
	char    skntray[11];
	char    ssttray[11];
	char    knsyb[8];
	char    ykcd[5];
	char    skiwsid[21];
	char    sknwsid[21];
	char    kkalstid[21];
	char    splblid[21];
	char    lstyb1[21];
	char    lstyb2[21];
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Knsgmst

BmlDMMInfo	KnsgmstArray[] = {
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( knsgrpnm ),
	DMM_SSTRING( knsgrprs ),
	DMM_SSTRING( seccd ),
	DMM_SSTRING( knshokbn ),
	DMM_SCHAR( knssbt ),
	DMM_SCHAR( bgroup ),
	DMM_SCHAR( unyokbn ),
	DMM_SSHORT( seqkthsok ),
	DMM_SSHORT( seqkthsng ),
	DMM_SCHAR( wsssksok ),
	DMM_SCHAR( wsssksng ),
	DMM_SSHORT( minryo ),
	DMM_SSHORT( maxryo ),
	DMM_SSTRING( skitray ),
	DMM_SSTRING( mbttray ),
	DMM_SSTRING( skntray ),
	DMM_SSTRING( ssttray ),
	DMM_SSTRING( knsyb ),
	DMM_SSTRING( ykcd ),
	DMM_SSTRING( skiwsid ),
	DMM_SSTRING( sknwsid ),
	DMM_SSTRING( kkalstid ),
	DMM_SSTRING( splblid ),
	DMM_SSTRING( lstyb1 ),
	DMM_SSTRING( lstyb2 ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbKnsgmstSelectAll()
 *    KNSGMST レコード全件取得
 * ■引数
 *    [O]  Knsgmst** arrayOut   取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKnsgmstSelectAll( Knsgmst** arrayOut, int* numOut )
{
    Knsgmst*    array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		KNSGRP,
		KNSGRPNM,
		KNSGRPRS,
		SECCD,
		KNSHOKBN,
		KNSSBT,
		BGROUP,
		UNYOKBN,
		SEQKTHSOK,
		SEQKTHSNG,
		WSSSKSOK,
		WSSSKSNG,
		MINRYO,
		MAXRYO,
		SKITRAY,
		MBTTRAY,
		SKNTRAY,
		SSTTRAY,
		KNSYB,
		YKCD,
		SKIWSID,
		SKNWSID,
		KKALSTID,
		SPLBLID,
		LSTYB1,
		LSTYB2,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        KNSGMST FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Knsgmst* rec;

        EXEC SQL FETCH c1 INTO
			:knsgrp,
			:knsgrpnm,
			:knsgrprs,
			:seccd,
			:knshokbn,
			:knssbt,
			:bgroup,
			:unyokbn,
			:seqkthsok,
			:seqkthsng,
			:wsssksok,
			:wsssksng,
			:minryo,
			:maxryo,
			:skitray,
			:mbttray,
			:skntray,
			:ssttray,
			:knsyb,
			:ykcd,
			:skiwsid,
			:sknwsid,
			:kkalstid,
			:splblid,
			:lstyb1,
			:lstyb2,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Knsgmst*)ZbmlRealloc( array,
                                    sizeof( Knsgmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Knsgmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KnsgmstArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbKnsgmstSelectKey()
 *    KNSGMST レコードKey条件取得
 * ■引数
 *    [I]  Knsgmst* pKey       取得するレコードのキー
 *    [O]  Knsgmst** arrayOut   取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKnsgmstSelectKey( Knsgmst* pKey, Knsgmst** arrayOut, int* numOut )
{
    Knsgmst*    array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, KnsgmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		KNSGRP,
		KNSGRPNM,
		KNSGRPRS,
		SECCD,
		KNSHOKBN,
		KNSSBT,
		BGROUP,
		UNYOKBN,
		SEQKTHSOK,
		SEQKTHSNG,
		WSSSKSOK,
		WSSSKSNG,
		MINRYO,
		MAXRYO,
		SKITRAY,
		MBTTRAY,
		SKNTRAY,
		SSTTRAY,
		KNSYB,
		YKCD,
		SKIWSID,
		SKNWSID,
		KKALSTID,
		SPLBLID,
		LSTYB1,
		LSTYB2,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        KNSGMST
    WHERE
		KNSGRP = :knsgrp AND
		KAIYMD <= :kaiymd FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Knsgmst* rec;

        EXEC SQL FETCH c2 INTO
			:knsgrp,
			:knsgrpnm,
			:knsgrprs,
			:seccd,
			:knshokbn,
			:knssbt,
			:bgroup,
			:unyokbn,
			:seqkthsok,
			:seqkthsng,
			:wsssksok,
			:wsssksng,
			:minryo,
			:maxryo,
			:skitray,
			:mbttray,
			:skntray,
			:ssttray,
			:knsyb,
			:ykcd,
			:skiwsid,
			:sknwsid,
			:kkalstid,
			:splblid,
			:lstyb1,
			:lstyb2,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Knsgmst*)ZbmlRealloc( array,
                                    sizeof( Knsgmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Knsgmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KnsgmstArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKnsgmstInsert()
 *    KNSGMST レコードを挿入する
 * ■引数
 *    [I]  Knsgmst* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKnsgmstInsert( Knsgmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KnsgmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO KNSGMST
    (
		KNSGRP,
		KNSGRPNM,
		KNSGRPRS,
		SECCD,
		KNSHOKBN,
		KNSSBT,
		BGROUP,
		UNYOKBN,
		SEQKTHSOK,
		SEQKTHSNG,
		WSSSKSOK,
		WSSSKSNG,
		MINRYO,
		MAXRYO,
		SKITRAY,
		MBTTRAY,
		SKNTRAY,
		SSTTRAY,
		KNSYB,
		YKCD,
		SKIWSID,
		SKNWSID,
		KKALSTID,
		SPLBLID,
		LSTYB1,
		LSTYB2,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) VALUES (
		:knsgrp,
		:knsgrpnm,
		:knsgrprs,
		:seccd,
		:knshokbn,
		:knssbt,
		:bgroup,
		:unyokbn,
		:seqkthsok,
		:seqkthsng,
		:wsssksok,
		:wsssksng,
		:minryo,
		:maxryo,
		:skitray,
		:mbttray,
		:skntray,
		:ssttray,
		:knsyb,
		:ykcd,
		:skiwsid,
		:sknwsid,
		:kkalstid,
		:splblid,
		:lstyb1,
		:lstyb2,
		:kaiymd,
		:haiymd,
		:hnktntid,
		:ksndh
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKnsgmstUpdate()
 *    KNSGMST レコードを更新する
 * ■引数
 *    [I]  Knsgmst* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKnsgmstUpdate( Knsgmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KnsgmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE KNSGMST
    SET (
		KNSGRPNM,
		KNSGRPRS,
		SECCD,
		KNSHOKBN,
		KNSSBT,
		BGROUP,
		UNYOKBN,
		SEQKTHSOK,
		SEQKTHSNG,
		WSSSKSOK,
		WSSSKSNG,
		MINRYO,
		MAXRYO,
		SKITRAY,
		MBTTRAY,
		SKNTRAY,
		SSTTRAY,
		KNSYB,
		YKCD,
		SKIWSID,
		SKNWSID,
		KKALSTID,
		SPLBLID,
		LSTYB1,
		LSTYB2,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) = (
		:knsgrpnm,
		:knsgrprs,
		:seccd,
		:knshokbn,
		:knssbt,
		:bgroup,
		:unyokbn,
		:seqkthsok,
		:seqkthsng,
		:wsssksok,
		:wsssksng,
		:minryo,
		:maxryo,
		:skitray,
		:mbttray,
		:skntray,
		:ssttray,
		:knsyb,
		:ykcd,
		:skiwsid,
		:sknwsid,
		:kkalstid,
		:splblid,
		:lstyb1,
		:lstyb2,
		:haiymd,
		:hnktntid,
		:ksndh
    ) WHERE
		KNSGRP = :knsgrp AND
		KAIYMD = :kaiymd;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbKnsgmstDelete()
 *    KNSGMST レコードを削除する
 * ■引数
 *    [I]  Knsgmst* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbKnsgmstDelete( Knsgmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KnsgmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM KNSGMST
    WHERE
		KNSGRP = :knsgrp AND
		KAIYMD = :kaiymd;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
