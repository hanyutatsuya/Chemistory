/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Ctrlmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "Ctrlmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    bskkbn[5];
	char    nbkmkcd[8];
	char    ctrlsbt[21];
	char    ctrlnm[41];
	char    ctrlrs[21];
	char    syklotno[21];
	char    ctrllbl[3];
	char    ctrlx[13];
	char    ctrlsd[13];
	char    ctrlcv[13];
	char    valuer[13];
	char    maxr[13];
	short   sstnksu;
	char    tankj[17];
	char    facterjd1[13];
	char    facterjd2[13];
	char    factersd1[13];
	char    factersd2[13];
	char    basejd1[13];
	char    basejd2[13];
	char    basesd1[13];
	char    basesd2[13];
	sqlint32  ksikjnspsu;
	char    shrnglwhf[13];
	char    shrnghihf[13];
	char    shrnglwhb[13];
	char    shrnghihb[13];
	char    hstkjntn[13];
	char    hstkzmhb[13];
	short   hstkaikyu;
	sqlint32  filenum;
	char    ykkigen[11];
	char    gktks[13];
	short   ctrlhyjn;
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Ctrlmst

BmlDMMInfo	CtrlmstArray[] = {
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( nbkmkcd ),
	DMM_SSTRING( ctrlsbt ),
	DMM_SSTRING( ctrlnm ),
	DMM_SSTRING( ctrlrs ),
	DMM_SSTRING( syklotno ),
	DMM_SSTRING( ctrllbl ),
	DMM_SSTRING( ctrlx ),
	DMM_SSTRING( ctrlsd ),
	DMM_SSTRING( ctrlcv ),
	DMM_SSTRING( valuer ),
	DMM_SSTRING( maxr ),
	DMM_SSHORT( sstnksu ),
	DMM_SSTRING( tankj ),
	DMM_SSTRING( facterjd1 ),
	DMM_SSTRING( facterjd2 ),
	DMM_SSTRING( factersd1 ),
	DMM_SSTRING( factersd2 ),
	DMM_SSTRING( basejd1 ),
	DMM_SSTRING( basejd2 ),
	DMM_SSTRING( basesd1 ),
	DMM_SSTRING( basesd2 ),
	DMM_SLONG( ksikjnspsu ),
	DMM_SSTRING( shrnglwhf ),
	DMM_SSTRING( shrnghihf ),
	DMM_SSTRING( shrnglwhb ),
	DMM_SSTRING( shrnghihb ),
	DMM_SSTRING( hstkjntn ),
	DMM_SSTRING( hstkzmhb ),
	DMM_SSHORT( hstkaikyu ),
	DMM_SLONG( filenum ),
	DMM_SDATE( ykkigen ),
	DMM_SSTRING( gktks ),
	DMM_SSHORT( ctrlhyjn ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbCtrlmstSelectAll()
 *    CTRLMST レコード全件取得
 * ■引数
 *    [O]  Ctrlmst** arrayOut   取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbCtrlmstSelectAll( Ctrlmst** arrayOut, int* numOut )
{
    Ctrlmst*    array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		BSKKBN,
		NBKMKCD,
		CTRLSBT,
		CTRLNM,
		CTRLRS,
		SYKLOTNO,
		CTRLLBL,
		CTRLX,
		CTRLSD,
		CTRLCV,
		VALUER,
		MAXR,
		SSTNKSU,
		TANKJ,
		FACTERJD1,
		FACTERJD2,
		FACTERSD1,
		FACTERSD2,
		BASEJD1,
		BASEJD2,
		BASESD1,
		BASESD2,
		KSIKJNSPSU,
		SHRNGLWHF,
		SHRNGHIHF,
		SHRNGLWHB,
		SHRNGHIHB,
		HSTKJNTN,
		HSTKZMHB,
		HSTKAIKYU,
		FILENUM,
		YKKIGEN,
		GKTKS,
		CTRLHYJN,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        CTRLMST FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Ctrlmst* rec;

        EXEC SQL FETCH c1 INTO
			:bskkbn,
			:nbkmkcd,
			:ctrlsbt,
			:ctrlnm,
			:ctrlrs,
			:syklotno,
			:ctrllbl,
			:ctrlx,
			:ctrlsd,
			:ctrlcv,
			:valuer,
			:maxr,
			:sstnksu,
			:tankj,
			:facterjd1,
			:facterjd2,
			:factersd1,
			:factersd2,
			:basejd1,
			:basejd2,
			:basesd1,
			:basesd2,
			:ksikjnspsu,
			:shrnglwhf,
			:shrnghihf,
			:shrnglwhb,
			:shrnghihb,
			:hstkjntn,
			:hstkzmhb,
			:hstkaikyu,
			:filenum,
			:ykkigen,
			:gktks,
			:ctrlhyjn,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Ctrlmst*)ZbmlRealloc( array,
                                    sizeof( Ctrlmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Ctrlmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, CtrlmstArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbCtrlmstSelectKey()
 *    CTRLMST レコードKey条件取得
 * ■引数
 *    [I]  Ctrlmst* pKey       取得するレコードのキー
 *    [O]  Ctrlmst** arrayOut   取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbCtrlmstSelectKey( Ctrlmst* pKey, Ctrlmst** arrayOut, int* numOut )
{
    Ctrlmst*    array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, CtrlmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		BSKKBN,
		NBKMKCD,
		CTRLSBT,
		CTRLNM,
		CTRLRS,
		SYKLOTNO,
		CTRLLBL,
		CTRLX,
		CTRLSD,
		CTRLCV,
		VALUER,
		MAXR,
		SSTNKSU,
		TANKJ,
		FACTERJD1,
		FACTERJD2,
		FACTERSD1,
		FACTERSD2,
		BASEJD1,
		BASEJD2,
		BASESD1,
		BASESD2,
		KSIKJNSPSU,
		SHRNGLWHF,
		SHRNGHIHF,
		SHRNGLWHB,
		SHRNGHIHB,
		HSTKJNTN,
		HSTKZMHB,
		HSTKAIKYU,
		FILENUM,
		YKKIGEN,
		GKTKS,
		CTRLHYJN,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        CTRLMST
    WHERE
		BSKKBN = :bskkbn AND
		NBKMKCD = :nbkmkcd AND
		CTRLSBT = :ctrlsbt AND
		KAIYMD <= :kaiymd FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Ctrlmst* rec;

        EXEC SQL FETCH c2 INTO
			:bskkbn,
			:nbkmkcd,
			:ctrlsbt,
			:ctrlnm,
			:ctrlrs,
			:syklotno,
			:ctrllbl,
			:ctrlx,
			:ctrlsd,
			:ctrlcv,
			:valuer,
			:maxr,
			:sstnksu,
			:tankj,
			:facterjd1,
			:facterjd2,
			:factersd1,
			:factersd2,
			:basejd1,
			:basejd2,
			:basesd1,
			:basesd2,
			:ksikjnspsu,
			:shrnglwhf,
			:shrnghihf,
			:shrnglwhb,
			:shrnghihb,
			:hstkjntn,
			:hstkzmhb,
			:hstkaikyu,
			:filenum,
			:ykkigen,
			:gktks,
			:ctrlhyjn,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Ctrlmst*)ZbmlRealloc( array,
                                    sizeof( Ctrlmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Ctrlmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, CtrlmstArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbCtrlmstInsert()
 *    CTRLMST レコードを挿入する
 * ■引数
 *    [I]  Ctrlmst* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbCtrlmstInsert( Ctrlmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, CtrlmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO CTRLMST
    (
		BSKKBN,
		NBKMKCD,
		CTRLSBT,
		CTRLNM,
		CTRLRS,
		SYKLOTNO,
		CTRLLBL,
		CTRLX,
		CTRLSD,
		CTRLCV,
		VALUER,
		MAXR,
		SSTNKSU,
		TANKJ,
		FACTERJD1,
		FACTERJD2,
		FACTERSD1,
		FACTERSD2,
		BASEJD1,
		BASEJD2,
		BASESD1,
		BASESD2,
		KSIKJNSPSU,
		SHRNGLWHF,
		SHRNGHIHF,
		SHRNGLWHB,
		SHRNGHIHB,
		HSTKJNTN,
		HSTKZMHB,
		HSTKAIKYU,
		FILENUM,
		YKKIGEN,
		GKTKS,
		CTRLHYJN,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) VALUES (
		:bskkbn,
		:nbkmkcd,
		:ctrlsbt,
		:ctrlnm,
		:ctrlrs,
		:syklotno,
		:ctrllbl,
		:ctrlx,
		:ctrlsd,
		:ctrlcv,
		:valuer,
		:maxr,
		:sstnksu,
		:tankj,
		:facterjd1,
		:facterjd2,
		:factersd1,
		:factersd2,
		:basejd1,
		:basejd2,
		:basesd1,
		:basesd2,
		:ksikjnspsu,
		:shrnglwhf,
		:shrnghihf,
		:shrnglwhb,
		:shrnghihb,
		:hstkjntn,
		:hstkzmhb,
		:hstkaikyu,
		:filenum,
		:ykkigen,
		:gktks,
		:ctrlhyjn,
		:kaiymd,
		:haiymd,
		:hnktntid,
		:ksndh
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbCtrlmstUpdate()
 *    CTRLMST レコードを更新する
 * ■引数
 *    [I]  Ctrlmst* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbCtrlmstUpdate( Ctrlmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, CtrlmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE CTRLMST
    SET (
		CTRLNM,
		CTRLRS,
		SYKLOTNO,
		CTRLLBL,
		CTRLX,
		CTRLSD,
		CTRLCV,
		VALUER,
		MAXR,
		SSTNKSU,
		TANKJ,
		FACTERJD1,
		FACTERJD2,
		FACTERSD1,
		FACTERSD2,
		BASEJD1,
		BASEJD2,
		BASESD1,
		BASESD2,
		KSIKJNSPSU,
		SHRNGLWHF,
		SHRNGHIHF,
		SHRNGLWHB,
		SHRNGHIHB,
		HSTKJNTN,
		HSTKZMHB,
		HSTKAIKYU,
		FILENUM,
		YKKIGEN,
		GKTKS,
		CTRLHYJN,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) = (
		:ctrlnm,
		:ctrlrs,
		:syklotno,
		:ctrllbl,
		:ctrlx,
		:ctrlsd,
		:ctrlcv,
		:valuer,
		:maxr,
		:sstnksu,
		:tankj,
		:facterjd1,
		:facterjd2,
		:factersd1,
		:factersd2,
		:basejd1,
		:basejd2,
		:basesd1,
		:basesd2,
		:ksikjnspsu,
		:shrnglwhf,
		:shrnghihf,
		:shrnglwhb,
		:shrnghihb,
		:hstkjntn,
		:hstkzmhb,
		:hstkaikyu,
		:filenum,
		:ykkigen,
		:gktks,
		:ctrlhyjn,
		:haiymd,
		:hnktntid,
		:ksndh
    ) WHERE
		BSKKBN = :bskkbn AND
		NBKMKCD = :nbkmkcd AND
		CTRLSBT = :ctrlsbt AND
		KAIYMD = :kaiymd;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbCtrlmstDelete()
 *    CTRLMST レコードを削除する
 * ■引数
 *    [I]  Ctrlmst* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbCtrlmstDelete( Ctrlmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, CtrlmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM CTRLMST
    WHERE
		BSKKBN = :bskkbn AND
		NBKMKCD = :nbkmkcd AND
		CTRLSBT = :ctrlsbt AND
		KAIYMD = :kaiymd;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
