/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Stdmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "Stdmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    bskkbn[5];
	char    nbkmkcd[8];
	short   stdsbt;
	char    kmkcd[8];
	char    stdnm[41];
	char    stdrk[21];
	char    stdx[9];
	char    stdsd[9];
	char    stdcv[9];
	char    valuer[9];
	char    maxr[9];
	short   place;
	short   unit[17];
	short   facter1[9];
	short   facter2[9];
	char    base1[9];
	char    base2[9];
	sqlint32  filenum;
	char    kigen[27];
	short   ctlstart;
	short   ctlcnt;
	short   ctlpos;
	short   ctlitv;
	short   ctllv;
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Stdmst

BmlDMMInfo	StdmstArray[] = {
	DMM_SSTRING( bskkbn ),
	DMM_SSTRING( nbkmkcd ),
	DMM_SSHORT( stdsbt ),
	DMM_SSTRING( kmkcd ),
	DMM_SSTRING( stdnm ),
	DMM_SSTRING( stdrk ),
	DMM_SSTRING( stdx ),
	DMM_SSTRING( stdsd ),
	DMM_SSTRING( stdcv ),
	DMM_SSTRING( valuer ),
	DMM_SSTRING( maxr ),
	DMM_SSHORT( place ),
	DMM_SSHORT( unit ),
	DMM_SSHORT( facter1 ),
	DMM_SSHORT( facter2 ),
	DMM_SSTRING( base1 ),
	DMM_SSTRING( base2 ),
	DMM_SLONG( filenum ),
	DMM_STIMESTAMP( kigen ),
	DMM_SSHORT( ctlstart ),
	DMM_SSHORT( ctlcnt ),
	DMM_SSHORT( ctlpos ),
	DMM_SSHORT( ctlitv ),
	DMM_SSHORT( ctllv ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbStdmstSelectAll()
 *    STDMST レコード全件取得
 * ■引数
 *    [O]  Stdmst** arrayOut    取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbStdmstSelectAll( Stdmst** arrayOut, int* numOut )
{
    Stdmst*     array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		BSKKBN,
		NBKMKCD,
		STDSBT,
		KMKCD,
		STDNM,
		STDRK,
		STDX,
		STDSD,
		STDCV,
		VALUER,
		MAXR,
		PLACE,
		UNIT,
		FACTER1,
		FACTER2,
		BASE1,
		BASE2,
		FILENUM,
		KIGEN,
		CTLSTART,
		CTLCNT,
		CTLPOS,
		CTLITV,
		CTLLV,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        STDMST FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Stdmst* rec;

        EXEC SQL FETCH c1 INTO
			:bskkbn,
			:nbkmkcd,
			:stdsbt,
			:kmkcd,
			:stdnm,
			:stdrk,
			:stdx,
			:stdsd,
			:stdcv,
			:valuer,
			:maxr,
			:place,
			:unit,
			:facter1,
			:facter2,
			:base1,
			:base2,
			:filenum,
			:kigen,
			:ctlstart,
			:ctlcnt,
			:ctlpos,
			:ctlitv,
			:ctllv,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Stdmst*)ZbmlRealloc( array,
                                    sizeof( Stdmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Stdmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, StdmstArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbStdmstSelectKey()
 *    STDMST レコードKey条件取得
 * ■引数
 *    [I]  Stdmst* pKey       取得するレコードのキー
 *    [O]  Stdmst** arrayOut    取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbStdmstSelectKey( Stdmst* pKey, Stdmst** arrayOut, int* numOut )
{
    Stdmst*     array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, StdmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		BSKKBN,
		NBKMKCD,
		STDSBT,
		KMKCD,
		STDNM,
		STDRK,
		STDX,
		STDSD,
		STDCV,
		VALUER,
		MAXR,
		PLACE,
		UNIT,
		FACTER1,
		FACTER2,
		BASE1,
		BASE2,
		FILENUM,
		KIGEN,
		CTLSTART,
		CTLCNT,
		CTLPOS,
		CTLITV,
		CTLLV,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        STDMST
    WHERE
		BSKKBN = :bskkbn AND
		NBKMKCD = :nbkmkcd AND
		STDSBT = :stdsbt AND
		KAIYMD <= :kaiymd FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Stdmst* rec;

        EXEC SQL FETCH c2 INTO
			:bskkbn,
			:nbkmkcd,
			:stdsbt,
			:kmkcd,
			:stdnm,
			:stdrk,
			:stdx,
			:stdsd,
			:stdcv,
			:valuer,
			:maxr,
			:place,
			:unit,
			:facter1,
			:facter2,
			:base1,
			:base2,
			:filenum,
			:kigen,
			:ctlstart,
			:ctlcnt,
			:ctlpos,
			:ctlitv,
			:ctllv,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Stdmst*)ZbmlRealloc( array,
                                    sizeof( Stdmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Stdmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, StdmstArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbStdmstInsert()
 *    STDMST レコードを挿入する
 * ■引数
 *    [I]  Stdmst* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbStdmstInsert( Stdmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, StdmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO STDMST
    (
		BSKKBN,
		NBKMKCD,
		STDSBT,
		KMKCD,
		STDNM,
		STDRK,
		STDX,
		STDSD,
		STDCV,
		VALUER,
		MAXR,
		PLACE,
		UNIT,
		FACTER1,
		FACTER2,
		BASE1,
		BASE2,
		FILENUM,
		KIGEN,
		CTLSTART,
		CTLCNT,
		CTLPOS,
		CTLITV,
		CTLLV,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) VALUES (
		:bskkbn,
		:nbkmkcd,
		:stdsbt,
		:kmkcd,
		:stdnm,
		:stdrk,
		:stdx,
		:stdsd,
		:stdcv,
		:valuer,
		:maxr,
		:place,
		:unit,
		:facter1,
		:facter2,
		:base1,
		:base2,
		:filenum,
		:kigen,
		:ctlstart,
		:ctlcnt,
		:ctlpos,
		:ctlitv,
		:ctllv,
		:kaiymd,
		:haiymd,
		:hnktntid,
		:ksndh
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbStdmstUpdate()
 *    STDMST レコードを更新する
 * ■引数
 *    [I]  Stdmst* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbStdmstUpdate( Stdmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, StdmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE STDMST
    SET (
		KMKCD,
		STDNM,
		STDRK,
		STDX,
		STDSD,
		STDCV,
		VALUER,
		MAXR,
		PLACE,
		UNIT,
		FACTER1,
		FACTER2,
		BASE1,
		BASE2,
		FILENUM,
		KIGEN,
		CTLSTART,
		CTLCNT,
		CTLPOS,
		CTLITV,
		CTLLV,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) = (
		:kmkcd,
		:stdnm,
		:stdrk,
		:stdx,
		:stdsd,
		:stdcv,
		:valuer,
		:maxr,
		:place,
		:unit,
		:facter1,
		:facter2,
		:base1,
		:base2,
		:filenum,
		:kigen,
		:ctlstart,
		:ctlcnt,
		:ctlpos,
		:ctlitv,
		:ctllv,
		:haiymd,
		:hnktntid,
		:ksndh
    ) WHERE
		BSKKBN = :bskkbn AND
		NBKMKCD = :nbkmkcd AND
		STDSBT = :stdsbt AND
		KAIYMD = :kaiymd;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbStdmstDelete()
 *    STDMST レコードを削除する
 * ■引数
 *    [I]  Stdmst* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbStdmstDelete( Stdmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, StdmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM STDMST
    WHERE
		BSKKBN = :bskkbn AND
		NBKMKCD = :nbkmkcd AND
		STDSBT = :stdsbt AND
		KAIYMD = :kaiymd;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
