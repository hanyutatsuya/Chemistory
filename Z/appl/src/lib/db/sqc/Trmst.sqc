/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Trmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "Trmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    trhdid[11];
	char    trsbt;
	char    trnm[21];
	short   trknhsu;
	short   trrcksu;
	char    filskdir[129];
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Trmst

BmlDMMInfo	TrmstArray[] = {
	DMM_SSTRING( trhdid ),
	DMM_SCHAR( trsbt ),
	DMM_SSTRING( trnm ),
	DMM_SSHORT( trknhsu ),
	DMM_SSHORT( trrcksu ),
	DMM_SSTRING( filskdir ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbTrmstSelectAll()
 *    TRMST レコード全件取得
 * ■引数
 *    [O]  Trmst** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbTrmstSelectAll( Trmst** arrayOut, int* numOut )
{
    Trmst*      array = NULL;
    int         num = 0;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c1 CURSOR FOR
    SELECT
		TRHDID,
		TRSBT,
		TRNM,
		TRKNHSU,
		TRRCKSU,
		FILSKDIR,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        TRMST FOR READ ONLY;

    EXEC SQL OPEN c1;

    while( 1 ) {
        Trmst* rec;

        EXEC SQL FETCH c1 INTO
			:trhdid,
			:trsbt,
			:trnm,
			:trknhsu,
			:trrcksu,
			:filskdir,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Trmst*)ZbmlRealloc( array,
                                    sizeof( Trmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Trmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, TrmstArray );
    }

    EXEC SQL CLOSE c1;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/******************************************************************************
 * ZdbTrmstSelectKey()
 *    TRMST レコードKey条件取得
 * ■引数
 *    [I]  Trmst* pKey       取得するレコードのキー
 *    [O]  Trmst** arrayOut     取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbTrmstSelectKey( Trmst* pKey, Trmst** arrayOut, int* numOut )
{
    Trmst*      array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, TrmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		TRHDID,
		TRSBT,
		TRNM,
		TRKNHSU,
		TRRCKSU,
		FILSKDIR,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        TRMST
    WHERE
		TRHDID = :trhdid AND
		KAIYMD <= :kaiymd FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Trmst* rec;

        EXEC SQL FETCH c2 INTO
			:trhdid,
			:trsbt,
			:trnm,
			:trknhsu,
			:trrcksu,
			:filskdir,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Trmst*)ZbmlRealloc( array,
                                    sizeof( Trmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Trmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, TrmstArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbTrmstInsert()
 *    TRMST レコードを挿入する
 * ■引数
 *    [I]  Trmst* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbTrmstInsert( Trmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, TrmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO TRMST
    (
		TRHDID,
		TRSBT,
		TRNM,
		TRKNHSU,
		TRRCKSU,
		FILSKDIR,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) VALUES (
		:trhdid,
		:trsbt,
		:trnm,
		:trknhsu,
		:trrcksu,
		:filskdir,
		:kaiymd,
		:haiymd,
		:hnktntid,
		:ksndh
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbTrmstUpdate()
 *    TRMST レコードを更新する
 * ■引数
 *    [I]  Trmst* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbTrmstUpdate( Trmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, TrmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE TRMST
    SET (
		TRSBT,
		TRNM,
		TRKNHSU,
		TRRCKSU,
		FILSKDIR,
		HAIYMD,
		HNKTNTID,
		KSNDH
    ) = (
		:trsbt,
		:trnm,
		:trknhsu,
		:trrcksu,
		:filskdir,
		:haiymd,
		:hnktntid,
		:ksndh
    ) WHERE
		TRHDID = :trhdid AND
		KAIYMD = :kaiymd;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * ZdbTrmstDelete()
 *    TRMST レコードを削除する
 * ■引数
 *    [I]  Trmst* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long ZdbTrmstDelete( Trmst* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, TrmstArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM TRMST
    WHERE
		TRHDID = :trhdid AND
		KAIYMD = :kaiymd;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
