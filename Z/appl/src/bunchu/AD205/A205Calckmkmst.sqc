/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Calckmkmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "Calckmkmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

// DBラップ変数定義
EXEC SQL BEGIN DECLARE SECTION;
	char    knsgrp[17];
	char    kmkcd[8];
	char    sstcd[8];
	char    zaicd[5];
	char    ksnsk[129];
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


// DMM定義
#define DMM_STRUCT	Calckmkmst

BmlDMMInfo	CalckmkmstArray2[] = {
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SSTRING( sstcd ),
	DMM_SSTRING( zaicd ),
	DMM_SSTRING( ksnsk ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

long A205CalckmkmstSelectKey2( Calckmkmst* pKey, Calckmkmst** arrayOut, int* numOut )
{
    Calckmkmst* array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, CalckmkmstArray2 ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c3 CURSOR FOR
    SELECT
		KNSGRP,
		KMKCD,
		SSTCD,
		ZAICD,
		KSNSK,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        CALCKMKMST
    WHERE
		KNSGRP = :knsgrp AND
		KSNSK LIKE :ksnsk AND
--		KAIYMD <= CURRENT DATE 
		KAIYMD <= :kaiymd AND
		HAIYMD >= :kaiymd
		FOR READ ONLY;

    EXEC SQL OPEN c3;

    while( 1 ) {
        Calckmkmst* rec;

        EXEC SQL FETCH c3 INTO
			:knsgrp,
			:kmkcd,
			:sstcd,
			:zaicd,
			:ksnsk,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Calckmkmst*)ZbmlRealloc( array,
                                    sizeof( Calckmkmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Calckmkmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, CalckmkmstArray2 );
    }

    EXEC SQL CLOSE c3;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

