/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Kmkmst.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-04-11                    Create
 **********************************************************************/
#include <stdio.h>

#include "A105kmkmst.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    knsgrp[17];
	char    kmkcd[8];
	char    kmknm[37];
	char    kmknmj[47];
	char    kmkrs[17];
	char    kmkrsj[21];
	char    kmknme[51];
	char    kmkhsknmj[21];
	char    fkkmknm[37];
	char    fkkmknmj[47];
	char    smpcd[8];
	char    oyakmkcd[8];
	char    korrn[8];
	char    seccd[3];
	char    stnflg;
	short   sstnksu;
	char    assay[41];
	short   fkjbn;
	char    fkbnkkb;
	char    tskflg[3];
	char    tktflg[3];
	char    ltmmnflg;
	char    zrkbn;
	sqlint32  bcrtj;
	sqlint32  bcrsr;
	sqlint32  bcrsn;
	char    yknknsflg;
	short   hrynsu;
	char    jdhskka[13];
	short   hyjijn;
	char    ksnkmkflg;
	char    hsiumflg;
	char    gmin[9];
	char    ghaba[9];
	short   rrkhzn;
	char    nyuyouflg;
	char    tstrflg;
	char    kmksbt;
	char    sgchkflg;
	char    ksjhflg;
	char    kssgflg;
	char    xmskflg;
	char    xmchkflg;
	short   xmcount;
	char    kaiymd[11];
	char    haiymd[11];
	char    hnktntid[9];
	char    ksndh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Kmkmst

BmlDMMInfo	KmkmstArray1[] = {
	DMM_SSTRING( knsgrp ),
	DMM_SSTRING( kmkcd ),
	DMM_SSTRING( kmknm ),
	DMM_SSTRING( kmknmj ),
	DMM_SSTRING( kmkrs ),
	DMM_SSTRING( kmkrsj ),
	DMM_SSTRING( kmknme ),
	DMM_SSTRING( kmkhsknmj ),
	DMM_SSTRING( fkkmknm ),
	DMM_SSTRING( fkkmknmj ),
	DMM_SSTRING( smpcd ),
	DMM_SSTRING( oyakmkcd ),
	DMM_SSTRING( korrn ),
	DMM_SSTRING( seccd ),
	DMM_SCHAR( stnflg ),
	DMM_SSHORT( sstnksu ),
	DMM_SSTRING( assay ),
	DMM_SSHORT( fkjbn ),
	DMM_SCHAR( fkbnkkb ),
	DMM_SSTRING( tskflg ),
	DMM_SSTRING( tktflg ),
	DMM_SCHAR( ltmmnflg ),
	DMM_SCHAR( zrkbn ),
	DMM_SLONG( bcrtj ),
	DMM_SLONG( bcrsr ),
	DMM_SLONG( bcrsn ),
	DMM_SCHAR( yknknsflg ),
	DMM_SSHORT( hrynsu ),
	DMM_SSTRING( jdhskka ),
	DMM_SSHORT( hyjijn ),
	DMM_SCHAR( ksnkmkflg ),
	DMM_SCHAR( hsiumflg ),
	DMM_SSTRING( gmin ),
	DMM_SSTRING( ghaba ),
	DMM_SSHORT( rrkhzn ),
	DMM_SCHAR( nyuyouflg ),
	DMM_SCHAR( tstrflg ),
	DMM_SCHAR( kmksbt ),
	DMM_SCHAR( sgchkflg ),
	DMM_SCHAR( ksjhflg ),
	DMM_SCHAR( kssgflg ),
	DMM_SCHAR( xmskflg ),
	DMM_SCHAR( xmchkflg ),
	DMM_SSHORT( xmcount ),
	DMM_SDATE( kaiymd ),
	DMM_SDATE( haiymd ),
	DMM_SSTRING( hnktntid ),
	DMM_STIMESTAMP( ksndh ),
	DMM_NULL
};

/******************************************************************************
 * ZdbKmkmstSelectKey()
 *    KMKMST レコードKey条件取得
 * ■引数
 *    [I]  Kmkmst* pKey       取得するレコードのキー
 *    [O]  Kmkmst** arrayOut    取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long A105KmkmstSelKey( Kmkmst* pKey, Kmkmst** arrayOut, int* numOut )
{
    Kmkmst*     array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, KmkmstArray1 ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		KNSGRP,
		KMKCD,
		KMKNM,
		KMKNMJ,
		KMKRS,
		KMKRSJ,
		KMKNME,
		KMKHSKNMJ,
		FKKMKNM,
		FKKMKNMJ,
		SMPCD,
		OYAKMKCD,
		KORRN,
		SECCD,
		STNFLG,
		SSTNKSU,
		ASSAY,
		FKJBN,
		FKBNKKB,
		TSKFLG,
		TKTFLG,
		LTMMNFLG,
		ZRKBN,
		BCRTJ,
		BCRSR,
		BCRSN,
		YKNKNSFLG,
		HRYNSU,
		JDHSKKA,
		HYJIJN,
		KSNKMKFLG,
		HSIUMFLG,
		GMIN,
		GHABA,
		RRKHZN,
		NYUYOUFLG,
		TSTRFLG,
		KMKSBT,
		SGCHKFLG,
		KSJHFLG,
		KSSGFLG,
		XMSKFLG,
		XMCHKFLG,
		XMCOUNT,
		KAIYMD,
		HAIYMD,
		HNKTNTID,
		KSNDH
    FROM
        KMKMST
    WHERE
		KNSGRP = :knsgrp AND
		KMKCD = :kmkcd AND
--		SMPCD = :smpcd AND
--		KAIYMD <= CURRENT DATE AND  
--		HAIYMD >= CURRENT DATE
		KAIYMD <= :kaiymd  AND  
		HAIYMD >= :kaiymd 
		FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Kmkmst* rec;

        EXEC SQL FETCH c2 INTO
			:knsgrp,
			:kmkcd,
			:kmknm,
			:kmknmj,
			:kmkrs,
			:kmkrsj,
			:kmknme,
			:kmkhsknmj,
			:fkkmknm,
			:fkkmknmj,
			:smpcd,
			:oyakmkcd,
			:korrn,
			:seccd,
			:stnflg,
			:sstnksu,
			:assay,
			:fkjbn,
			:fkbnkkb,
			:tskflg,
			:tktflg,
			:ltmmnflg,
			:zrkbn,
			:bcrtj,
			:bcrsr,
			:bcrsn,
			:yknknsflg,
			:hrynsu,
			:jdhskka,
			:hyjijn,
			:ksnkmkflg,
			:hsiumflg,
			:gmin,
			:ghaba,
			:rrkhzn,
			:nyuyouflg,
			:tstrflg,
			:kmksbt,
			:sgchkflg,
			:ksjhflg,
			:kssgflg,
			:xmskflg,
			:xmchkflg,
			:xmcount,
			:kaiymd,
			:haiymd,
			:hnktntid,
			:ksndh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Kmkmst*)ZbmlRealloc( array,
                                    sizeof( Kmkmst ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Kmkmst ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KmkmstArray1 );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}
/** End of File *********************************************************/
