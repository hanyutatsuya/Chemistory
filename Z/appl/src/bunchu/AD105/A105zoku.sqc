/**********************************************************************
 *
 *     ＢＭＬ様向け検査システム
 *
 *     システム名：次世代
 *     ファイル名： Kenzok.sqc
 *     機能概要  ：
 **********************************************************************/

/**********************************************************************
 *  Ver.     Date           Name           History
 * --------------------------------------------------------------------
 *  1.00     2006-02-10                    Create
 **********************************************************************/
#include <stdio.h>

#include "A105zoku.h"
#include "bml_misc.h"
#include "bml_db.h"
#include "bml_dmm.h"
#include "bmllog.h"

#define ALLOC_UNIT		1

EXEC SQL INCLUDE SQLCA;

/*--------------------------------------
// DBラップ変数定義
*/
EXEC SQL BEGIN DECLARE SECTION;
	char    utkymd[11];
	char    irino[12];
	char    iriketflg;
	short   zssdino;
	char    sriymd[11];
	char    kntno[14];
	char    kntketflg;
	char    knsgslbcd[4];
	short   kntzssdino;
	char    knttcyymd[11];
	char    fszrgrp[3];
	char    irikntryo[6];
	char    irikntryotni;
	char    gnkntryo[6];
	char    gnkntryotni;
	char    chkmj[5];
	char    rucd[3];
	char    ykcd[21];
	char    htkfkiri;
	char    ysnflg;
	char    kntfrflg;
	char    ykzrcd[4];
	char    hzzrcd[4];
	char    kntjtflg;
	char    knttktkbn;
	char    hbncflg;
	char    kntzsssflg;
	char    kntzstrdh[27];
	char    kntzsssdh[27];
	char    stlkntzsssdh[27];
	char    stlkntzsssip[16];
	char    stlkntzssssyaid[9];
	char    sklblflg;
	char    zrcd[4];
	char    sstme[9];
	char    ssymd[11];
	char    tntme[5];
	char    tntni;
	char    tnryo[6];
	char    tnryotni;
	char    ssbi[21];
	char    sshhu[21];
	char    hkflg[3];
	char    msriymd[11];
	char    mkntno[14];
	char    id2[11];
	short   id2pos;
	char    id3[11];
	short   id3pos;
	char    sntrno[11];
	char    sntnno[11];
	char    nstsgflg;
	char    hknjk;
	char    hknjkksndh[27];
	char    ksndh[27];
	char    trkdh[27];
EXEC SQL END DECLARE SECTION;


/*--------------------------------------
// DMM定義
*/
#define DMM_STRUCT	Kenzok

BmlDMMInfo	KenzokArray[] = {
	DMM_SDATE( utkymd ),
	DMM_SSTRING( irino ),
	DMM_SCHAR( iriketflg ),
	DMM_SSHORT( zssdino ),
	DMM_SDATE( sriymd ),
	DMM_SSTRING( kntno ),
	DMM_SCHAR( kntketflg ),
	DMM_SSTRING( knsgslbcd ),
	DMM_SSHORT( kntzssdino ),
	DMM_SDATE( knttcyymd ),
	DMM_SSTRING( fszrgrp ),
	DMM_SSTRING( irikntryo ),
	DMM_SCHAR( irikntryotni ),
	DMM_SSTRING( gnkntryo ),
	DMM_SCHAR( gnkntryotni ),
	DMM_SSTRING( chkmj ),
	DMM_SSTRING( rucd ),
	DMM_SSTRING( ykcd ),
	DMM_SCHAR( htkfkiri ),
	DMM_SCHAR( ysnflg ),
	DMM_SCHAR( kntfrflg ),
	DMM_SSTRING( ykzrcd ),
	DMM_SSTRING( hzzrcd ),
	DMM_SCHAR( kntjtflg ),
	DMM_SCHAR( knttktkbn ),
	DMM_SCHAR( hbncflg ),
	DMM_SCHAR( kntzsssflg ),
	DMM_STIMESTAMP( kntzstrdh ),
	DMM_STIMESTAMP( kntzsssdh ),
	DMM_STIMESTAMP( stlkntzsssdh ),
	DMM_SSTRING( stlkntzsssip ),
	DMM_SSTRING( stlkntzssssyaid ),
	DMM_SCHAR( sklblflg ),
	DMM_SSTRING( zrcd ),
	DMM_STIME( sstme ),
	DMM_SDATE( ssymd ),
	DMM_SSTRING( tntme ),
	DMM_SCHAR( tntni ),
	DMM_SSTRING( tnryo ),
	DMM_SCHAR( tnryotni ),
	DMM_SSTRING( ssbi ),
	DMM_SSTRING( sshhu ),
	DMM_SSTRING( hkflg ),
	DMM_SDATE( msriymd ),
	DMM_SSTRING( mkntno ),
	DMM_SSTRING( id2 ),
	DMM_SSHORT( id2pos ),
	DMM_SSTRING( id3 ),
	DMM_SSHORT( id3pos ),
	DMM_SSTRING( sntrno ),
	DMM_SSTRING( sntnno ),
	DMM_SCHAR( nstsgflg ),
	DMM_SCHAR( hknjk ),
	DMM_STIMESTAMP( hknjkksndh ),
	DMM_STIMESTAMP( ksndh ),
	DMM_STIMESTAMP( trkdh ),
	DMM_NULL
};

/******************************************************************************
 * AZokuSel()
 *    KENZOK レコードKey条件取得
 * ■引数
 *    [I]  Kenzok* pKey       取得するレコードのキー
 *    [O]  Kenzok** arrayOut    取得レコード配列格納領域
 *    [O]  int* numOut          取得件数
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了（レコードあり）
 *           HRC_SQL_NOT_FOUND  レコードなし
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long AZokuSel( Kenzok* pKey, Kenzok** arrayOut, int* numOut )
{
    Kenzok*     array = NULL;
    int         num = 0;

    if( !pKey )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)pKey, KenzokArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DECLARE c2 CURSOR FOR
    SELECT
		UTKYMD,
		IRINO,
		IRIKETFLG,
		ZSSDINO,
		SRIYMD,
		KNTNO,
		KNTKETFLG,
		KNSGSLBCD,
		KNTZSSDINO,
		KNTTCYYMD,
		FSZRGRP,
		IRIKNTRYO,
		IRIKNTRYOTNI,
		GNKNTRYO,
		GNKNTRYOTNI,
		CHKMJ,
		RUCD,
		YKCD,
		HTKFKIRI,
		YSNFLG,
		KNTFRFLG,
		YKZRCD,
		HZZRCD,
		KNTJTFLG,
		KNTTKTKBN,
		HBNCFLG,
		KNTZSSSFLG,
		KNTZSTRDH,
		KNTZSSSDH,
		STLKNTZSSSDH,
		STLKNTZSSSIP,
		STLKNTZSSSSYAID,
		SKLBLFLG,
		ZRCD,
		SSTME,
		SSYMD,
		TNTME,
		TNTNI,
		TNRYO,
		TNRYOTNI,
		SSBI,
		SSHHU,
		HKFLG,
		MSRIYMD,
		MKNTNO,
		ID2,
		ID2POS,
		ID3,
		ID3POS,
		SNTRNO,
		SNTNNO,
		NSTSGFLG,
		HKNJK,
		HKNJKKSNDH,
		KSNDH,
		TRKDH
    FROM
        KENZOK
    WHERE
		KNTNO = :kntno AND
		KNSGSLBCD = :knsgslbcd AND
		KNTZSSDINO = :kntzssdino AND
		SRIYMD = :sriymd FOR READ ONLY;

    EXEC SQL OPEN c2;

    while( 1 ) {
        Kenzok* rec;

        EXEC SQL FETCH c2 INTO
			:utkymd,
			:irino,
			:iriketflg,
			:zssdino,
			:sriymd,
			:kntno,
			:kntketflg,
			:knsgslbcd,
			:kntzssdino,
			:knttcyymd,
			:fszrgrp,
			:irikntryo,
			:irikntryotni,
			:gnkntryo,
			:gnkntryotni,
			:chkmj,
			:rucd,
			:ykcd,
			:htkfkiri,
			:ysnflg,
			:kntfrflg,
			:ykzrcd,
			:hzzrcd,
			:kntjtflg,
			:knttktkbn,
			:hbncflg,
			:kntzsssflg,
			:kntzstrdh,
			:kntzsssdh,
			:stlkntzsssdh,
			:stlkntzsssip,
			:stlkntzssssyaid,
			:sklblflg,
			:zrcd,
			:sstme,
			:ssymd,
			:tntme,
			:tntni,
			:tnryo,
			:tnryotni,
			:ssbi,
			:sshhu,
			:hkflg,
			:msriymd,
			:mkntno,
			:id2,
			:id2pos,
			:id3,
			:id3pos,
			:sntrno,
			:sntnno,
			:nstsgflg,
			:hknjk,
			:hknjkksndh,
			:ksndh,
			:trkdh;

        if( SQLCODE == 100 )
            break;

        if( num % ALLOC_UNIT == 0 ) {
            array = (Kenzok*)ZbmlRealloc( array,
                                    sizeof( Kenzok ) * ( num + ALLOC_UNIT ) );
            memset( array + num, 0, sizeof( Kenzok ) * ALLOC_UNIT );
        }

        rec = array + num++;
        ZbmlMapHostToStruct( (char*)rec, KenzokArray );
    }

    EXEC SQL CLOSE c2;

    *arrayOut = array;
    *numOut   = num;

    return num ? HRC_SQL_NORMAL : HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * AdbKzokInsert()
 *    KENZOK レコードを挿入する
 * ■引数
 *    [I]  Kenzok* rec       挿入レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long AZokuInsert( Kenzok* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KenzokArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL INSERT INTO KENZOK
    (
		UTKYMD,
		IRINO,
		IRIKETFLG,
		ZSSDINO,
		SRIYMD,
		KNTNO,
		KNTKETFLG,
		KNSGSLBCD,
		KNTZSSDINO,
		KNTTCYYMD,
		FSZRGRP,
		IRIKNTRYO,
		IRIKNTRYOTNI,
		GNKNTRYO,
		GNKNTRYOTNI,
		CHKMJ,
		RUCD,
		YKCD,
		HTKFKIRI,
		YSNFLG,
		KNTFRFLG,
		YKZRCD,
		HZZRCD,
		KNTJTFLG,
		KNTTKTKBN,
		HBNCFLG,
		KNTZSSSFLG,
		KNTZSTRDH,
		KNTZSSSDH,
		STLKNTZSSSDH,
		STLKNTZSSSIP,
		STLKNTZSSSSYAID,
		SKLBLFLG,
		ZRCD,
		SSTME,
		SSYMD,
		TNTME,
		TNTNI,
		TNRYO,
		TNRYOTNI,
		SSBI,
		SSHHU,
		HKFLG,
		MSRIYMD,
		MKNTNO,
		ID2,
		ID2POS,
		ID3,
		ID3POS,
		SNTRNO,
		SNTNNO,
		NSTSGFLG,
		HKNJK,
		HKNJKKSNDH,
		KSNDH,
		TRKDH
    ) VALUES (
		:utkymd,
		:irino,
		:iriketflg,
		:zssdino,
		:sriymd,
		:kntno,
		:kntketflg,
		:knsgslbcd,
		:kntzssdino,
		:knttcyymd,
		:fszrgrp,
		:irikntryo,
		:irikntryotni,
		:gnkntryo,
		:gnkntryotni,
		:chkmj,
		:rucd,
		:ykcd,
		:htkfkiri,
		:ysnflg,
		:kntfrflg,
		:ykzrcd,
		:hzzrcd,
		:kntjtflg,
		:knttktkbn,
		:hbncflg,
		:kntzsssflg,
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP,
		:stlkntzsssip,
		:stlkntzssssyaid,
		:sklblflg,
		:zrcd,
		:sstme,
		:ssymd,
		:tntme,
		:tntni,
		:tnryo,
		:tnryotni,
		:ssbi,
		:sshhu,
		:hkflg,
		:msriymd,
		:mkntno,
		:id2,
		:id2pos,
		:id3,
		:id3pos,
		:sntrno,
		:sntnno,
		:nstsgflg,
		:hknjk,
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP
    );

    return HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    return sqlca.sqlcode;
}

/******************************************************************************
 * AZokuUpdate()
 *    KENZOK レコードを更新する
 * ■引数
 *    [I]  Kenzok* rec       更新対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long AZokuUpdate( Kenzok* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KenzokArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR  GO TO error;

    EXEC SQL UPDATE KENZOK
    SET (
		UTKYMD,
		IRINO,
		IRIKETFLG,
		ZSSDINO,
		KNTKETFLG,
		KNTTCYYMD,
		FSZRGRP,
		IRIKNTRYO,
		IRIKNTRYOTNI,
		GNKNTRYO,
		GNKNTRYOTNI,
		CHKMJ,
		RUCD,
		YKCD,
		HTKFKIRI,
		YSNFLG,
		KNTFRFLG,
		YKZRCD,
		HZZRCD,
		KNTJTFLG,
		KNTTKTKBN,
		HBNCFLG,
		KNTZSSSFLG,
		KNTZSTRDH,
		KNTZSSSDH,
		STLKNTZSSSDH,
		STLKNTZSSSIP,
		STLKNTZSSSSYAID,
		SKLBLFLG,
		ZRCD,
		SSTME,
		SSYMD,
		TNTME,
		TNTNI,
		TNRYO,
		TNRYOTNI,
		SSBI,
		SSHHU,
		HKFLG,
		MSRIYMD,
		MKNTNO,
		ID2,
		ID2POS,
		ID3,
		ID3POS,
		SNTRNO,
		SNTNNO,
		NSTSGFLG,
		HKNJK,
		HKNJKKSNDH,
		KSNDH
--		TRKDH					// 登録日時はUPDATE対象外
    ) = (
		:utkymd,
		:irino,
		:iriketflg,
		:zssdino,
		:kntketflg,
		:knttcyymd,
		:fszrgrp,
		:irikntryo,
		:irikntryotni,
		:gnkntryo,
		:gnkntryotni,
		:chkmj,
		:rucd,
		:ykcd,
		:htkfkiri,
		:ysnflg,
		:kntfrflg,
		:ykzrcd,
		:hzzrcd,
		:kntjtflg,
		:knttktkbn,
		:hbncflg,
		:kntzsssflg,
--		:kntzstrdh,				// 3.02 UPDATE ではあるがCURRENTを設定
--		:kntzsssdh,				// 3.02 UPDATE ではあるがCURRENTを設定
--		:stlkntzsssdh,			// 3.02 UPDATE ではあるがCURRENTを設定
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP,
		:stlkntzsssip,
		:stlkntzssssyaid,
		:sklblflg,
		:zrcd,
		:sstme,
		:ssymd,
		:tntme,
		:tntni,
		:tnryo,
		:tnryotni,
		:ssbi,
		:sshhu,
		:hkflg,
		:msriymd,
		:mkntno,
		:id2,
		:id2pos,
		:id3,
		:id3pos,
		:sntrno,
		:sntnno,
		:nstsgflg,
		:hknjk,
--		:hknjkksndh,
--		:ksndh,
--		:trkdh
		CURRENT TIMESTAMP,
		CURRENT TIMESTAMP
--		CURRENT TIMESTAMP
    ) WHERE
		SRIYMD = :sriymd AND
		KNTNO = :kntno AND
		KNSGSLBCD = :knsgslbcd AND
		KNTZSSDINO = :kntzssdino;

    return HRC_SQL_NORMAL;

notfound:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    return HRC_SQL_NOT_FOUND;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    return sqlca.sqlcode;
}

/******************************************************************************
 * AZokuDelete()
 *    KENZOK レコードを削除する
 * ■引数
 *    [I]  Kenzok* rec       削除対象レコード
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long AZokuDelete( Kenzok* rec )
{
    if( !rec )
        return HRC_NULL_POINTER;

    if( !ZbmlMapStructToHost( (char*)rec, KenzokArray ) )
        return HRC_INVALID_VALUE;

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL DELETE FROM KENZOK
    WHERE
		SRIYMD = :sriymd AND
		KNTNO = :kntno AND
		KNSGSLBCD = :knsgslbcd AND
		KNTZSSDINO = :kntzssdino;

    return SQLCODE == 100 ? HRC_SQL_NOT_FOUND : HRC_SQL_NORMAL;

error:
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    return sqlca.sqlcode;
}

/******************************************************************************
 * AZokuDelete()
 *    KENZOK レコードを削除する
 * ■引数
 *    [I]  char *pSriymd        処理日
 *    [I]  char *pKntno         検体No
 *    [I]  int   iZssdino       属性世代No
 *    [O]  char *pKntno         ID2
 * ■戻り値
 *    (long) HRC_SQL_NORMAL     正常終了
 *           HRC_SQL_NOT_FOUND  対象レコードなし
 *           HRC_NULL_POINTER   パラメータエラー
 *           HRC_INVALID_VALUE  設定値不正
 *           HRC_SQL_ERR        DBエラー
 ******************************************************************************/
long AZokuSelId2( char* pSriymd, char* pKntno, int iZssdino, char* pRetId2, int* iRetId2pos )
{

	int		iCursorFlg = 0 ;

	EXEC SQL WHENEVER NOT FOUND GO TO notfound;
    EXEC SQL WHENEVER SQLERROR GO TO error;

	// 検索キー設定
	strcpy ( sriymd, pSriymd ) ;
	strcpy ( kntno,  pKntno ) ;
	zssdino = iZssdino ;

	// 検索結果設定
	memset(id2, 0, sizeof(id2)) ;
	id2pos = *iRetId2pos ;

	EXEC SQL DECLARE c_zok_id2 CURSOR FOR
	SELECT
		ID2,
		ID2POS
	FROM
		KENZOK
	WHERE
		KNTNO  = :kntno AND
		SRIYMD = :sriymd AND
		ZSSDINO = :zssdino
	FETCH FIRST 1 ROWS ONLY
	FOR READ ONLY ;

	EXEC SQL OPEN c_zok_id2 ;
	iCursorFlg = 1 ;

	EXEC SQL FETCH c_zok_id2 INTO :id2, :id2pos ;

	EXEC SQL CLOSE c_zok_id2 ;

	memcpy(pRetId2, id2, sizeof(id2));
	*iRetId2pos = id2pos ;

	return HRC_SQL_NORMAL ;

notfound:
	EXEC SQL WHENEVER NOT FOUND CONTINUE;

	sFncPutLog ( TRCKIND_TRACE, __FILE__, "AZokuSelId2	", __LINE__, EXEFLG_SEL, "00000000",
				 "NOT FOUND CONTINUE" );

	// カーソルがオープンされている場合、クローズする
	if ( iCursorFlg )
	{
		sFncPutLog ( TRCKIND_TRACE, __FILE__, "AZokuSelId2	", __LINE__, EXEFLG_SEL, "00000000",
					 "CURSOR CLOSE BEFORE (NOT FOUND)" );

		EXEC SQL CLOSE c_zok_id2 ;

		sFncPutLog ( TRCKIND_TRACE, __FILE__, "AZokuSelId2	", __LINE__, EXEFLG_SEL, "00000000",
					 "CURSOR CLOSE AFTER (NOT FOUND)" );
	}

	return HRC_SQL_NOT_FOUND;

error:
	EXEC SQL WHENEVER SQLERROR CONTINUE;

	sFncPutLog ( TRCKIND_TRACE, __FILE__, "AZokuSelId2	", __LINE__, EXEFLG_SEL, "00000000",
				 "SQLERROR CONTINUE" );

	// カーソルがオープンされている場合、クローズする
	if ( iCursorFlg )
	{
		sFncPutLog ( TRCKIND_TRACE, __FILE__, "AZokuSelId2	", __LINE__, EXEFLG_SEL, "00000000",
					 "CURSOR CLOSE BEFORE (SQLERROR)" );

		EXEC SQL CLOSE c_zok_id2 ;

		sFncPutLog ( TRCKIND_TRACE, __FILE__, "AZokuSelId2	", __LINE__, EXEFLG_SEL, "00000000",
					 "CURSOR CLOSE AFTER (SQLERROR)" );
	}

	return sqlca.sqlcode;
}
/** End of File *********************************************************/
